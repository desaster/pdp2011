       1                                         .title vtbr - terminal microcode
       2                                
       3                                ;--
       4                                ;-- Copyright (c) 2008-2023 Sytse van Slooten
       5                                ;--
       6                                ;-- Permission is hereby granted to any person obtaining a copy of these VHDL source files and
       7                                ;-- other language source files and associated documentation files ("the materials") to use
       8                                ;-- these materials solely for personal, non-commercial purposes.
       9                                ;-- You are also granted permission to make changes to the materials, on the condition that this
      10                                ;-- copyright notice is retained unchanged.
      11                                ;--
      12                                ;-- The materials are distributed in the hope that they will be useful, but WITHOUT ANY WARRANTY;
      13                                ;-- without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
      14                                ;--
      15 000000                         lc       =.
      16 000000 000167  000774                   jmp t42
      17                                ;
      18                                ; -------------------------------------------------------------------
      19                                ;
      20                                ; misc definitions
      21                                ;
      22                                ; -------------------------------------------------------------------
      23                                ;
      24 000000                         r0       = %0
      25 000001                         r1       = %1
      26 000002                         r2       = %2
      27 000003                         r3       = %3
      28 000004                         r4       = %4
      29 000005                         r5       = %5
      30 000006                         r6       = %6
      31 000007                         r7       = %7
      32 000006                         sp       = %6
      33 000007                         pc       = %7
      34                                ;
      35                                ; serial port
      36                                ;
      37 177560                         rcsr     = 177560                 ; serial port receive csr
      38 177562                         rbuf     = 177562                 ; serial port receive buffer
      39 177564                         xcsr     = 177564                 ; serial port transmit csr
      40 177566                         xbuf     = 177566                 ; serial port transmit buffer
      41                                ;
      42                                ; vga component control registers
      43                                ;
      44 140000                         vgacur   = 140000                 ; cursor address - pointer to cursor position in buffer space
      45 140002                         vgacr    = 140002                 ; control register - flag bits
      46 140004                         vgash0   = 140004                 ; shade line 0 value
      47 140006                         vgash1   = 140006                 ; shade line 1 value
      48 140010                         vgaxp    = 140010                 ; x position for strip charts
      49 140012                         vgavtt   = 140012                 ; vt type - 100 or 105
      50 140014                         vgaact   = 140014                 ; activity counter
      51 140014                         vgaacl   = 140014                 ; activity counter low byte - count keyboard activity
      52 140015                         vgaach   = 140015                 ; activity counter high byte - count serial receive activity
      53 140016                         vgadb    = 140016                 ; debug output for logic analyzer capture
      54 140016                         vgadbl   = 140016                 ; debug output low byte
      55 140017                         vgadbh   = 140017                 ; debug output high byte
      56 140040                         vgadwh   = 140040                 ; double width/double height flags
      57                                ;
      58                                ; parser states - see vt100.net at https://vt100.net/emu/dec_ansi_parser for explanation
      59                                ;
      60 000000                         psg      = 0                      ; ground
      61 000002                         pscsip   = 2                      ; csi param
      62 000004                         pscsii   = 4                      ; csi ignore
      63 000006                         pscsin   = 6                      ; csi intermediate
      64 000010                         pscsie   = 10                     ; csi entry
      65 000012                         psei     = 12                     ; escape intermediate
      66 000014                         psesc    = 14                     ; escape
      67 000016                         psosc    = 16                     ; osc string (not used yet)
      68 000020                         psstr    = 20                     ; sos/pm/apc string (not used yet)
      69 000022                         psdcse   = 22                     ; dcs entry (not used yet)
      70 000024                         psdcsp   = 24                     ; dcs param (not used yet)
      71 000026                         psdcsi   = 26                     ; dcs ignore (not used yet)
      72 000030                         psdcsn   = 30                     ; dcs intermediate (not used yet)
      73 000032                         psdcst   = 32                     ; dcs passthrough (not used yet)
      74 000034                         psdummy  = 34                     ; dummy to make table size a power of 2
      75                                ;
      76                                ; screen coordinate constants
      77                                ;
      78 000001                         colmin   = 1                      ; the minimum column address
      79 000120                         colmax   = 120                    ; the maximum column address, 80 decimal
      80 000050                         colhmx   = 50                     ; half colmax, 40 decimal - for double-width lines
      81 000001                         rowmin   = 1                      ; minimum row number
      82 000030                         rowmax   = 30                     ; maximum row number, 24 decimal
      83 000001                         dtmarg   = 1                      ; default top margin row number
      84 000030                         dbmarg   = 30                     ; default bottom margin row number
      85 000030                         dwsize   = 30                     ; default window/scroll area size
      86                                ;
      87                                ; character set ids
      88                                ;
      89 000101                         chruk    = 101                    ; uk special set - pound signal instead of dollar
      90 000102                         chrasc   = 102                    ; default set
      91 000060                         chrgra   = 60                     ; default set with graphics instead of lower case
      92 000061                         chra1    = 61                     ; alternate rom standard (same as default for now)
      93 000062                         chra2    = 62                     ; alternate rom special (same as default for now)
      94                                ;
      95                                ; max csi sequence parameters
      96                                ;
      97 000016                         mxcsip   = 16                     ; actually: the max byte offset of the last parm.
      98                                ;
      99                                ; -------------------------------------------------------------------
     100                                ; -------------------------------------------------------------------
     101                                ;
     102                                ; writable data
     103                                ;
     104                                ; -------------------------------------------------------------------
     105                                ; -------------------------------------------------------------------
     106                                ;
     107                                ; this source is translated into vtbr.vhd - a blockram component that has an extra
     108                                ; trick in it: only the bytes 0-1000 are writable. writes to higher addresses are
     109                                ; silently ignored. Thus, code in the 1000 and up region can not be self modifying,
     110                                ; and all variable data must be below address 1000.
     111                                ;
     112                                ; low (writable) data layout
     113                                ;
     114                                ; +-------------------------+ 0
     115                                ; | vector area             |
     116                                ; +-------------------------+ 100
     117                                ; | rcvbuf                  |
     118                                ; | ps2buf                  |
     119                                ; +-------------------------+
     120                                ; | variables               |
     121                                ; +-------------------------+ <=700
     122                                ; | stack                   |
     123                                ; +-------------------------+ 1000
     124                                ;
     125                                ;
     126                                ;
     127                                ; -------------------------------------------------------------------
     128                                ;
     129                                ; reserve space for vectors
     130                                ;
     131                                ; the cpu that runs this is 11/20 - no mmu, no pirq, no fpu, and the highest vector on the bus
     132                                ; is for the ps/2 keyboard peripheral @ 70 - only the first 100(oct) bytes need to be reserved
     133                                ;
     134 000100                                  .=lc+100
     135                                ;
     136                                ; buffers
     137                                ;
     138 000200                         rcvbln   = 200
     139 000100                         rcvbuf:  .blkb rcvbln             ; circular buffer for characters received from the serial interface
     140 000040                         ps2bln   = 40
     141 000300                         ps2buf:  .blkb ps2bln             ; circular buffer for codes received from the keyboard
     142                                ;
     143                                ;
     144                                ;
     145 000340 000000                  rcvbfc:  .word 0                  ; actual receive buffer count
     146 000120                         rcvbhi   = 120                    ; receive buffer high water mark
     147 000020                         rcvblo   = 20                     ; receive buffer low water mark
     148 000342    000                  xoff:    .byte 0                  ; current xon/xoff state
     149 000343    000                  xoffm:   .byte 0                  ; current xon/xoff manual state
     150                                ;
     151                                ; pointers in circular buffers
     152                                ;
     153                                         .even
     154 000344 000000                  rcvcons: .word 0
     155 000346 000000                  rcvprod: .word 0
     156 000350 000000                  ps2cons: .word 0
     157 000352 000000                  ps2prod: .word 0
     158                                ;
     159                                ; -------------------------------------------------------------------
     160                                ; -------------------------------------------------------------------
     161                                ;
     162                                ; variables
     163                                ;
     164                                ; -------------------------------------------------------------------
     165                                ; -------------------------------------------------------------------
     166                                ;
     167                                ;
     168                                ; current status: cursor position, lcf, attributes, charset
     169                                ;
     170                                         .even
     171 000354 000000                  curr:    .word 0                  ; row
     172 000356 000000                  scurr:   .word 0                  ; saved row
     173 000360 000000                  curc:    .word 0                  ; col
     174 000362 000000                  scurc:   .word 0                  ; saved col
     175 000364    000                  lcf:     .byte 0                  ; last-column flag
     176 000365    000                  slcf:    .byte 0                  ; saved lcf
     177                                ;
     178                                ; atth: current attribute byte
     179                                ;
     180 000366    000                  atth:    .byte 0                  ; attribute high byte
     181 000367    000                  satth:   .byte 0                  ; saved atth
     182                                ;
     183                                ; character sets
     184                                ;
     185 000370    000                  g0set:   .byte 0                  ; set0
     186 000371    000                  g1set:   .byte 0                  ; set1
     187 000372    000                  chrset:  .byte 0                  ; current
     188 000373    000                  schrst:  .byte 0                  ; saved char set
     189                                ;
     190                                ; scroll window
     191                                ;
     192                                         .even
     193 000374 000001                  tmarg:   .word dtmarg             ; top margin
     194 000376 000030                  bmarg:   .word dbmarg             ; bottom margin
     195 000400 000030                  wsize:   .word dwsize             ; window size
     196                                ;
     197                                ; tab stops
     198                                ;
     199                                ;              1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
     200 000402    000     000     000  tabtab:  .byte 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
         000405    000     000     000  
         000410    000     000     001  
         000413    000     000     000  
         000416    000     000     000  
         000421    000     001     000  
         000424    000     000     000  
         000427    000     000     000  
         000432    001     000     000  
         000435    000     000     000  
         000440    000     000     001  
         000443    000     000     000  
         000446    000     000     000  
         000451    000                  
     201 000452    001     000     000           .byte 1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
         000455    000     000     000  
         000460    000     000     001  
         000463    000     000     000  
         000466    000     000     000  
         000471    000     001     000  
         000474    000     000     000  
         000477    000     000     000  
         000502    001     000     000  
         000505    000     000     000  
         000510    000     000     001  
         000513    000     000     000  
         000516    000     000     000  
         000521    000                  
     202                                ;
     203                                ; keyboard state flags
     204                                ;
     205 000522    000                  ps2up:   .byte 0                  ; nonzero if last scancode was a f0 - key up event
     206 000523    000                  ps2ex:   .byte 0                  ; nonzero if last scancode was a e0 - extended key
     207 000524    000                  ps2lc:   .byte 0                  ; nonzero if left control key is down
     208 000525    000                  ps2rc:   .byte 0                  ; nonzero if right control key is down
     209 000526    000                  ps2ls:   .byte 0                  ; nonzero if left shift key is down
     210 000527    000                  ps2rs:   .byte 0                  ; nonzero if right shift key is down
     211 000530    000                  ps2cl:   .byte 0                  ; nonzero if caps lock is on
     212                                ;
     213                                ; vt52 mode flag
     214                                ;
     215 000531    000                  vt52:    .byte 0                  ; master vt52 mode flag
     216 000532    000                  vt52yl:  .byte 0                  ; temp storage for ESCYlc direct cursor address sequence
     217                                ;
     218                                ; graphics data
     219                                ;
     220 000533    000                  vt105g:  .byte 0                  ; graphics mode
     221 000534    000                  grshl1:  .byte 0                  ; shade line load flag marker
     222 000535    000                           .even
     223 000536 000000                  gpload:  .word 0                  ; address of processing routine
     224 000540 000000                  gpch1:   .word 0                  ; value of first character in sequence
     225 000542 000000                  gplx:    .word 0                  ; x-coord for loading graph memories
     226                                ;
     227                                ; mode flags
     228                                ;
     229 000544    000                  anslnm:  .byte 0                  ; line feed/new line mode
     230 000545    000                  ansins:  .byte 0                  ; insert/replace : 0=replace,1=insert
     231 000546    000                  decawm:  .byte 0                  ; autowrap mode
     232 000547    000                  decckm:  .byte 0                  ; cursor keys mode
     233 000550    000                  deckpam: .byte 0                  ; keypad application mode
     234 000551    000                  deccolm: .byte 0                  ; column mode - 80 or 132. Default 80, 132 is not supported
     235 000552    000                  decom:   .byte 0                  ; origin mode
     236                                ;
     237                                ; escape intermediate char
     238                                ;
     239 000553    000                  eichar:  .byte 0
     240                                         .even
     241                                ;
     242                                ; csi parameters
     243                                ;
     244 000554 000000                  parmc:   .word 0
     245 000556 000000  000000  000000  parmt:   .word 0,0,0,0,0,0,0,0,0  ; the raw parm values (converted from decimal characters, or default: 0)
         000564 000000  000000  000000  
         000572 000000  000000  000000  
     246 000600 000000                  parm1:   .word 0                  ; normalized parm 1 - default 1 if missing or 0
     247 000602 000000                  parm2:   .word 0                  ; normalized parm 2
     248                                ;
     249                                ; parse state
     250                                ;
     251 000604 000000                  pstate:  .word 0                       ;
     252                                ;
     253                                ; -------------------------------------------------------------------
     254                                ;
     255                                ; start of code
     256                                ;
     257                                ; -------------------------------------------------------------------
     258                                ;
     259 001000                                  .=lc+1000
     260                                t42:
     261 001000 012737  000340  177776           mov #340,@#177776        ; set psw prio to 7 - block interrupts
     262 001006 012706  001000                   mov #1000,sp
     263                                ;
     264                                ; setup receive buffers
     265                                ;
     266 001012 005067  177326                   clr rcvcons              ; consume equal produce means buffer empty
     267 001016 005067  177324                   clr rcvprod              ; receive is what we receive on our slu port
     268 001022 005067  177312                   clr rcvbfc               ; clear buffer count
     269 001026 105067  177310                   clrb xoff                ; clear xon/xoff state
     270 001032 105067  177305                   clrb xoffm               ; clear xon/xoff manual state
     271 001036 005067  177306                   clr ps2cons              ; first we consume, then we produce
     272 001042 005067  177304                   clr ps2prod              ; xmit is what we received from the ps2 port
     273                                ;
     274                                ; setup interrupt vectors
     275                                ;
     276 001046 012737  014664  000060           mov #ivecrcv,@#60        ; slu receive vector
     277 001054 012737  000340  000062           mov #340,@#62            ; 340 - isr runs disabled
     278 001062 012737  015026  000064           mov #ivecxmt,@#64        ; slu xmit vector (not used)
     279 001070 012737  000340  000066           mov #340,@#66            ; 340 - isr runs disabled
     280 001076 012737  015030  000070           mov #ivecps2,@#70        ; ps2 receive vector
     281 001104 012737  000340  000072           mov #340,@#72            ; 340 - isr runs disabled
     282 001112 012737  000100  177560           mov #100,@#rcsr          ; set interrupt enable in slu
     283 001120 012737  000100  150000           mov #100,@#150000        ; set interrupt enable in ps2
     284 001126 012737  000000  177776           mov #0,@#177776          ; allow interrupts on all levels
     285                                ;
     286                                ; setup frame buffer etc
     287                                ;
     288 001134 005067  177444                   clr pstate
     289 001140 004767  004046                   jsr pc,clrdwh            ; clear double height/double width
     290 001144 012703  100000                   mov #100000,r3           ; start of buffer
     291                                1$:
     292 001150 012723  000040                   mov #40,(r3)+            ; fill the buffer with spaces
     293 001154 020327  107400                   cmp r3,#107400           ; at the end yet?
     294 001160 001373                           bne 1$                   ; branch if no
     295                                
     296 001162 012702  015122                   mov #hello,r2            ; set up for hello world
     297 001166 012703  100000                   mov #100000,r3           ; at the start of the screen
     298 001172 022737  000151  140012           cmp #105.,@#vgavtt       ; check for vt type
     299 001200 001002                           bne 2$
     300 001202 012702  015160                   mov #hel105,r2           ; set up alternate banner for vt105
     301                                2$:
     302 001206 112200                           movb (r2)+,r0            ; load char
     303 001210 010023                           mov r0,(r3)+             ; write in buffer
     304 001212 001375                           bne 2$                   ; end of the string done yet? branch if not
     305 001214 012743  000040                   mov #40,-(r3)            ; erase error char caused by zero terminated string
     306                                ;
     307                                ; init more
     308                                ;
     309 001220 105067  177276                   clrb ps2up               ; clear up/break status
     310 001224 105067  177273                   clrb ps2ex               ; clear extended status
     311 001230 105067  177270                   clrb ps2lc               ; clear left control
     312 001234 105067  177265                   clrb ps2rc               ; clear right control
     313 001240 105067  177262                   clrb ps2ls               ; clear left shift
     314 001244 105067  177257                   clrb ps2rs               ; clear right shift
     315 001250 105067  177254                   clrb ps2cl               ; clear caps
     316 001254 004767  012240                   jsr pc,gbclr             ; clear graph memories
     317 001260 012767  000003  177066           mov #3,curr              ; init cursor position, should probably be 1,1 at some point but the hello world is there
     318 001266 012767  000001  177064           mov #1,curc              ; init column
     319 001274 012767  000001  177054           mov #1,scurr             ; init saved row
     320 001302 012767  000001  177052           mov #1,scurc             ; init saved col
     321 001310 112767  000102  177054           movb #chrasc,chrset      ; default char set is ascii
     322 001316 112767  000102  177044           movb #chrasc,g0set       ; set g0 set to ascii default too
     323 001324 112767  000102  177037           movb #chrasc,g1set       ; set g1 set to ascii default too
     324 001332 112767  000102  177033           movb #chrasc,schrst      ; init saved char set
     325 001340 012767  000001  177026           mov #dtmarg,tmarg        ; default scroll window from line 1
     326 001346 012767  000030  177022           mov #dbmarg,bmarg        ; to 24
     327 001354 012767  000030  177016           mov #dwsize,wsize        ; init wsize
     328 001362 105067  177000                   clrb atth                ; init attribute
     329 001366 105067  176775                   clrb satth               ; init saved attribute
     330 001372 105067  177154                   clrb decom               ; clear origin mode
     331 001376 112767  000001  177142           movb #1,decawm           ; set awm, seems the most reasonable default
     332 001404 105067  177135                   clrb ansins              ; clear insert mode
     333 001410 105067  177130                   clrb anslnm              ; clear new line mode
     334 001414 105067  177131                   clrb deccolm             ; clear 132-column mode (not implemented for now)
     335 001420 105067  177123                   clrb decckm              ; clear cursor key mode (not implemented for now)
     336 001424 105067  176734                   clrb lcf                 ; clear last column flag
     337 001430 105067  176731                   clrb slcf                ; clear saved last column flag
     338 001434 105067  177073                   clrb vt105g              ; clear graphics mode flag
     339 001440 105067  177070                   clrb grshl1              ; clear shade load flag
     340 001444 105067  177061                   clrb vt52                ; clear vt52 mode flag
     341 001450 105067  177056                   clrb vt52yl              ; clear vt52 direct cursor address temp storage
     342 001454 105067  177070                   clrb deckpam             ; clear keypad application mode
     343 001460 005037  140002                   clr @#vgacr              ; set all control register flags off
     344 001464 005037  140004                   clr @#vgash0             ; clear shade line 0
     345 001470 005037  140006                   clr @#vgash1             ; clear shade line 1
     346 001474 005037  140014                   clr @#vgaact             ; clear activity counter
     347                                ;
     348                                ; mainline code
     349                                ;
     350                                4$:
     351 001500 004767  007346                   jsr pc,fba               ; get buffer address of current pos
     352 001504 010037  140000                   mov r0,@#vgacur          ; write cursor position into control register
     353                                ;
     354                                ; check keyboard for input
     355                                ;
     356 001510 004767  012170                   jsr pc,ps2getc           ; try to read keyboard
     357 001514 005700                           tst r0                   ; anything?
     358 001516 001420                           beq 6$                   ; branch if not
     359 001520 105237  140014                   incb @#vgaacl            ; show activity
     360 001524 004767  012462                   jsr pc,ps2xlt            ; try to translate scan code into character or code for routine
     361 001530 005700                           tst r0                   ; anything?
     362 001532 001412                           beq 6$                   ; branch if not
     363 001534 120127  000340                   cmpb r1,#kcminc          ; did ps2xlt return a character or a function code?
     364 001540 103403                           blo 5$                   ; branch if character
     365 001542 004767  001476                   jsr pc,kcproc            ; process key codes
     366 001546 000754                           br 4$                    ; done
     367                                5$:
     368 001550 010100                           mov r1,r0                ; regular char, move it to r0
     369 001552 004767  013234                   jsr pc,xmit              ; and xmit to the host
     370 001556 000750                           br 4$                    ; done
     371                                ;
     372                                ; check serial port for input
     373                                ;
     374                                6$:
     375 001560 004767  011766                   jsr pc,rcvgetc           ; try to read a char
     376 001564 005700                           tst r0                   ; did we get one?
     377 001566 001744                           beq 4$                   ; r0 zero means no
     378 001570 105237  140015                   incb @#vgaach            ; show activity
     379 001574 042701  177600                   bic #177600,r1           ; make sure only 7 bits left
     380 001600 004767  010224                   jsr pc,cntrl             ; process control character
     381 001604 005701                           tst r1                   ; did cntrl clear r1?
     382 001606 001734                           beq 4$                   ; yes - it dealt with the character
     383                                7$:
     384 001610 116100  015256                   movb ptrans(r1),r0       ; check state transition table
     385 001614 005700                           tst r0                   ; zero means not
     386 001616 001402                           beq 8$
     387 001620 010067  176760                   mov r0,pstate            ; load new state
     388                                8$:
     389 001624 016700  176754                   mov pstate,r0            ; load parser state
     390 001630 042700  177761                   bic #177761,r0           ; make sure even and in range
     391 001634 062700  015216                   add #ptab,r0             ; add start of table
     392 001640 011000                           mov (r0),r0              ; load address of parser routine from table
     393 001642 004710                           jsr pc,(r0)              ; go there
     394                                
     395 001644 000715                           br 4$
     396                                ;
     397                                ; -------------------------------------------------------------------
     398                                ;
     399                                ; gparse - parse graphics instructions
     400                                ;
     401                                gparse:
     402 001646 120127  000100                   cmpb r1,#100             ; @ - lowest value graphics mode designator
     403 001652 103415                           blo 10$                  ; lower?
     404 001654 120127  000114                   cmpb r1,#114             ; L - highest value
     405 001660 101012                           bhi 10$                  ; higher?
     406 001662 162701  000100                   sub #100,r1              ; base from 0
     407 001666 006301                           asl r1                   ; make word index
     408 001670 016101  002046                   mov gpt(r1),r1           ; load address
     409 001674 010167  176636                   mov r1,gpload            ; set routine
     410 001700 005067  176634                   clr gpch1
     411 001704 000456                           br 90$
     412                                10$:
     413 001706 120127  000040                   cmpb r1,#40              ; space - lowest value graphics value
     414 001712 103450                           blo 80$                  ; lower?
     415 001714 120127  000077                   cmpb r1,#77              ; ? - highest value
     416 001720 101045                           bhi 80$                  ; higher?
     417 001722 005767  176612                   tst gpch1                ; first char already set?
     418 001726 001015                           bne 20$                  ; branch if yes
     419 001730 010167  176604                   mov r1,gpch1             ; set it now
     420 001734 016700  176576                   mov gpload,r0            ; load routine address
     421 001740 020027  002130                   cmp r0,#gcr0             ; is it A?
     422 001744 001404                           beq 15$                  ; yes
     423 001746 020027  002664                   cmp r0,#gcr1             ; is it I?
     424 001752 001401                           beq 15$                  ; yes
     425 001754 000432                           br 90$                   ; not one of those, done here
     426                                15$:
     427 001756 004710                           jsr pc,(0)               ; for A or I commands, call already after the first char
     428 001760 000430                           br 90$                   ; done for now
     429                                20$:
     430 001762 042701  177740                   bic #177740,r1           ; leave only 5 bits
     431 001766 006301                           asl r1                   ; shift left 1
     432 001770 006301                           asl r1                   ; shift left 2
     433 001772 006301                           asl r1                   ; shift left 3
     434 001774 006301                           asl r1                   ; shift left 4
     435 001776 006301                           asl r1                   ; shift left 5
     436 002000 042767  177740  176532           bic #177740,gpch1        ; make sure only low 5 bits remain set in gpch1
     437 002006 066701  176526                   add gpch1,r1             ; add in low char from gpch1
     438 002012 005067  176522                   clr gpch1                ; and make sure it is cleared for the next round
     439 002016 005767  176514                   tst gpload               ; check if gpload set?
     440 002022 001404                           beq 80$                  ; no, error exit
     441 002024 016700  176506                   mov gpload,r0            ; load routine address
     442 002030 004710                           jsr pc,(r0)              ; go there
     443 002032 000403                           br 90$                   ; and done here
     444                                80$:
     445 002034 005067  176500                   clr gpch1                ; clear first char, start from start
     446 002040 000207                           rts pc                   ; unhappy return
     447                                90$:
     448 002042 005000                           clr r0                   ; show we handled things
     449 002044 000207                           rts pc                   ; happy return path
     450                                ;
     451                                ; -------------------------------------------------------------------
     452                                ;
     453                                ; routine table for graphics parser
     454                                ;
     455 002046 002100                  gpt:    .word gsh                 ; @ - shade line
     456 002050 002130                          .word gcr0                ; A - control register 0
     457 002052 002446                          .word ggr0                ; B - graph 0
     458 002054 002520                          .word ggm0                ; C - marker 0
     459 002056 002574                          .word ggh                 ; D - horizontal line
     460 002060 002650                          .word gno                 ; E
     461 002062 002650                          .word gno                 ; F
     462 002064 002650                          .word gno                 ; G
     463 002066 002652                          .word gsx                 ; H - starting X
     464 002070 002664                          .word gcr1                ; I - control register 1
     465 002072 003052                          .word ggr1                ; J - graph 1
     466 002074 003114                          .word ggm1                ; K - marker 1
     467 002076 003170                          .word ggv                 ; L - vertical line
     468                                ;
     469                                ; -------------------------------------------------------------------
     470                                ;
     471                                ; load shade line position
     472                                ;
     473                                gsh:
     474 002100 042701  177400                   bic #177400,r1           ; mask off high bits
     475 002104 105767  176424                   tstb grshl1              ; check flag
     476 002110 001003                           bne 10$                  ; if not clear, then we're loading sh1
     477 002112 010137  140004                   mov r1,@#vgash0          ; load sh0
     478 002116 000403                           br 90$
     479                                10$:
     480 002120 010137  140006                   mov r1,@#vgash1          ; load sh1
     481 002124 000400                           br 90$
     482                                90$:
     483 002126 000207                           rts pc
     484                                ;
     485                                ; -------------------------------------------------------------------
     486                                ;
     487                                ; cr0
     488                                ;
     489                                gcr0:
     490 002130 032701  000001                   bit #1,r1                ; check master enable bit
     491 002134 001404                           beq 10$                  ; branch if not on
     492 002136 052737  000001  140002           bis #1,@#vgacr           ; set it in the control register
     493 002144 000403                           br 11$
     494                                10$:
     495 002146 042737  000001  140002           bic #1,@#vgacr           ; clear it
     496                                11$:
     497                                ;
     498 002154 032701  000002                   bit #2,r1                ; graph0 enable bit
     499 002160 001404                           beq 20$                  ; branch if not on
     500 002162 052737  000002  140002           bis #2,@#vgacr           ; set it in the control register
     501 002170 000403                           br 21$
     502                                20$:
     503 002172 042737  000002  140002           bic #2,@#vgacr           ; clear it
     504                                21$:
     505                                ;
     506 002200 032701  000004                   bit #4,r1                ; graph1 enable bit
     507 002204 001404                           beq 30$                  ; branch if not on
     508 002206 052737  000004  140002           bis #4,@#vgacr           ; set it in the control register
     509 002214 000403                           br 31$
     510                                30$:
     511 002216 042737  000004  140002           bic #4,@#vgacr           ; clear it
     512                                31$:
     513                                ;
     514 002224 032701  000010                   bit #10,r1               ; hist0 enable bit
     515 002230 001404                           beq 40$                  ; branch if not on
     516 002232 052737  000010  140002           bis #10,@#vgacr          ; set it in the control register
     517 002240 000403                           br 41$
     518                                40$:
     519 002242 042737  000010  140002           bic #10,@#vgacr          ; clear it
     520                                41$:
     521                                ;
     522 002250 032701  000020                   bit #20,r1               ; hist1 enable bit
     523 002254 001404                           beq 50$                  ; branch if not on
     524 002256 052737  000020  140002           bis #20,@#vgacr          ; set it in the control register
     525 002264 000403                           br 51$
     526                                50$:
     527 002266 042737  000020  140002           bic #20,@#vgacr          ; clear it
     528                                51$:
     529                                ;
     530 002274 032701  000100                   bit #100,r1              ; graph0 ref shade line 0
     531 002300 001404                           beq 60$                  ; branch if not on
     532 002302 052737  002000  140002           bis #2000,@#vgacr        ; set it in the control register
     533 002310 000403                           br 61$
     534                                60$:
     535 002312 042737  002000  140002           bic #2000,@#vgacr        ; clear it
     536                                61$:
     537                                ;
     538 002320 005767  176214                   tst gpch1                ; check if the gpch1 is nonzero - then we've been called vt52-style, and then there is no 3rd byte
     539 002324 001047                           bne 999$                 ; branch if so
     540                                ;
     541 002326 032701  000200                   bit #200,r1              ; graph1 ref shade line 1
     542 002332 001404                           beq 70$                  ; branch if not on
     543 002334 052737  004000  140002           bis #4000,@#vgacr        ; set it in the control register
     544 002342 000403                           br 71$
     545                                70$:
     546 002344 042737  004000  140002           bic #4000,@#vgacr        ; clear it
     547                                71$:
     548                                ;
     549 002352 032701  000040                   bit #40,r1               ; set up to load shade line 0 or 1?
     550 002356 001404                           beq 80$                  ; branch if not on
     551 002360 112767  000001  176146           movb #1,grshl1           ; set flag
     552 002366 000402                           br 81$
     553                                80$:
     554 002370 105067  176140                   clrb grshl1              ; clear flag
     555                                81$:
     556                                ;
     557 002374 032701  000400                   bit #400,r1              ; single strip
     558 002400 001404                           beq 90$                  ; branch if not on
     559 002402 052737  010000  140002           bis #10000,@#vgacr       ; set it in the control register
     560 002410 000403                           br 91$
     561                                90$:
     562 002412 042737  010000  140002           bic #10000,@#vgacr       ; clear it
     563                                91$:
     564                                ;
     565 002420 032701  001000                   bit #1000,r1             ; dual strip
     566 002424 001404                           beq 100$                 ; branch if not on
     567 002426 052737  020000  140002           bis #20000,@#vgacr       ; set it in the control register
     568 002434 000403                           br 101$
     569                                100$:
     570 002436 042737  020000  140002           bic #20000,@#vgacr       ; clear it
     571                                101$:
     572                                ;
     573                                999$:
     574 002444 000207                           rts pc
     575                                ;
     576                                ; -------------------------------------------------------------------
     577                                ;
     578                                ; load graph0
     579                                ;
     580                                ggr0:
     581 002446 016700  176070                   mov gplx,r0              ; load last x coordinate
     582 002452 006300                           asl r0                   ; make word index
     583 002454 042700  176000                   bic #176000,r0           ; make doubly sure no inappropriate bits left
     584 002460 052700  110000                   bis #110000,r0           ; set bits for graph0
     585 002464 110110                           movb r1,(r0)             ; put it there
     586 002466 032737  020000  140002           bit #20000,@#vgacr       ; check the control register for dual strip mode
     587 002474 001010                           bne 10$                  ; dual strip - suspend update x coord until graph1 is loaded
     588 002476 005267  176040                   inc gplx                 ; increment x coord
     589 002502 042767  177000  176032           bic #177000,gplx         ; mask off anything over 511
     590 002510 016737  176026  140010           mov gplx,@#vgaxp         ; copy gplx into the control register
     591                                10$:
     592 002516 000207                           rts pc
     593                                ;
     594                                ; -------------------------------------------------------------------
     595                                ;
     596                                ; load graph markers 0
     597                                ;
     598                                ggm0:
     599 002520 022701  000777                   cmp #511.,r1             ; check for max value
     600 002524 103410                           blo 10$                  ; go to setting marks if higher
     601 002526 006301                           asl r1                   ; word index
     602 002530 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     603 002534 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     604 002540 142711  000001                   bicb #1,(r1)             ; clear the bit
     605 002544 000412                           br 90$
     606                                10$:
     607 002546 042701  177000                   bic #177000,r1           ; mask off high bits
     608 002552 006301                           asl r1                   ; word index
     609 002554 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     610 002560 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     611 002564 152711  000001                   bisb #1,(r1)             ; set the bit
     612 002570 000400                           br 90$
     613                                90$:
     614 002572 000207                           rts pc
     615                                ;
     616                                ; -------------------------------------------------------------------
     617                                ;
     618                                ; load or clear horizontal lines
     619                                ;
     620                                ggh:
     621 002574 022701  000777                   cmp #511.,r1             ; check for max value
     622 002600 103410                           blo 10$                  ; go to setting marks if higher
     623 002602 006301                           asl r1                   ; word index
     624 002604 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     625 002610 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     626 002614 142711  000010                   bicb #10,(r1)            ; clear the bit
     627 002620 000412                           br 90$
     628                                10$:
     629 002622 042701  177000                   bic #177000,r1           ; mask off high bits
     630 002626 006301                           asl r1                   ; word index
     631 002630 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     632 002634 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     633 002640 152711  000010                   bisb #10,(r1)            ; set the bit
     634 002644 000400                           br 90$
     635                                90$:
     636 002646 000207                           rts pc
     637                                ;
     638                                ; -------------------------------------------------------------------
     639                                ;
     640                                ; dummy placeholder
     641                                ;
     642                                gno:
     643 002650 000207                           rts pc
     644                                ;
     645                                ; -------------------------------------------------------------------
     646                                ;
     647                                ; set x coord for graph0/1 loading
     648                                ;
     649                                gsx:
     650 002652 010167  175664                   mov r1,gplx              ; store value in gplx, that's all there is to it
     651 002656 010137  140010                   mov r1,@#vgaxp           ; and set it in the control register too
     652 002662 000207                           rts pc
     653                                ;
     654                                ; -------------------------------------------------------------------
     655                                ;
     656                                ; process control register 1
     657                                ;
     658                                gcr1:
     659                                ;
     660 002664 032701  000001                   bit #1,r1                ; hline enable bit
     661 002670 001404                           beq 10$                  ; branch if not on
     662 002672 052737  000040  140002           bis #40,@#vgacr          ; set it in the control register
     663 002700 000403                           br 11$
     664                                10$:
     665 002702 042737  000040  140002           bic #40,@#vgacr          ; clear it
     666                                11$:
     667                                ;
     668 002710 032701  000002                   bit #2,r1                ; vline enable bit
     669 002714 001404                           beq 20$                  ; branch if not on
     670 002716 052737  000100  140002           bis #100,@#vgacr         ; set it in the control register
     671 002724 000403                           br 21$
     672                                20$:
     673 002726 042737  000100  140002           bic #100,@#vgacr          ; clear it
     674                                21$:
     675                                ;
     676 002734 032701  000004                   bit #4,r1                ; marker0 enable bit
     677 002740 001404                           beq 30$                  ; branch if not on
     678 002742 052737  000400  140002           bis #400,@#vgacr         ; set it in the control register
     679 002750 000403                           br 31$
     680                                30$:
     681 002752 042737  000400  140002           bic #400,@#vgacr         ; clear it
     682                                31$:
     683                                ;
     684 002760 032701  000010                   bit #10,r1               ; marker1 enable bit
     685 002764 001404                           beq 40$                  ; branch if not on
     686 002766 052737  001000  140002           bis #1000,@#vgacr        ; set it in the control register
     687 002774 000403                           br 41$
     688                                40$:
     689 002776 042737  001000  140002           bic #1000,@#vgacr        ; clear it
     690                                41$:
     691                                ;
     692 003004 032701  000020                   bit #20,r1               ; graph memories reset bit
     693 003010 001402                           beq 50$                  ; branch if not on
     694 003012 004767  010502                   jsr pc,gbclr             ; clear graph memories
     695                                50$:
     696                                ;
     697 003016 005767  175516                   tst gpch1                ; check for 3rd byte?
     698 003022 001012                           bne 999$                 ; if gpch1 is nonzero, then we're called for two bytes
     699                                ;
     700 003024 032701  000040                   bit #40,r1               ; rectangle/square bit
     701 003030 001404                           beq 60$                  ; branch if not on
     702 003032 052737  100000  140002           bis #100000,@#vgacr      ; set it
     703 003040 000403                           br 61$
     704                                60$:
     705 003042 042737  100000  140002           bic #100000,@#vgacr      ; clear it
     706                                61$:
     707                                ;
     708                                999$:
     709 003050 000207                           rts pc
     710                                ;
     711                                ; -------------------------------------------------------------------
     712                                ;
     713                                ; load graph1
     714                                ;
     715                                ggr1:
     716 003052 016700  175464                   mov gplx,r0              ; load last x coordinate
     717 003056 006300                           asl r0                   ; make word index
     718 003060 042700  176000                   bic #176000,r0           ; make doubly sure no inappropriate bits left
     719 003064 052700  112000                   bis #112000,r0           ; set bits for graph1
     720 003070 110110                           movb r1,(r0)             ; put it there
     721 003072 005267  175444                   inc gplx                 ; increment x coord
     722 003076 042767  177000  175436           bic #177000,gplx         ; mask off anything over 511
     723 003104 016737  175432  140010           mov gplx,@#vgaxp         ; copy gplx into the control register
     724 003112 000207                           rts pc
     725                                ;
     726                                ; -------------------------------------------------------------------
     727                                ;
     728                                ; load graph markers 1
     729                                ;
     730                                ggm1:
     731 003114 022701  000777                   cmp #511.,r1             ; check for max value
     732 003120 103410                           blo 10$                  ; go to setting marks if higher
     733 003122 006301                           asl r1                   ; word index
     734 003124 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     735 003130 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     736 003134 142711  000002                   bicb #2,(r1)             ; clear the bit
     737 003140 000412                           br 90$
     738                                10$:
     739 003142 042701  177000                   bic #177000,r1           ; mask off high bits
     740 003146 006301                           asl r1                   ; word index
     741 003150 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     742 003154 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     743 003160 152711  000002                   bisb #2,(r1)             ; set the bit
     744 003164 000400                           br 90$
     745                                90$:
     746 003166 000207                           rts pc
     747                                ;
     748                                ; -------------------------------------------------------------------
     749                                ;
     750                                ; load or clear vertical lines
     751                                ;
     752                                ggv:
     753 003170 022701  000777                   cmp #511.,r1             ; check for max value
     754 003174 103410                           blo 10$                  ; go to setting marks if higher
     755 003176 006301                           asl r1                   ; word index
     756 003200 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     757 003204 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     758 003210 142711  000004                   bicb #4,(r1)             ; clear the bit
     759 003214 000412                           br 90$
     760                                10$:
     761 003216 042701  177000                   bic #177000,r1           ; mask off high bits
     762 003222 006301                           asl r1                   ; word index
     763 003224 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     764 003230 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     765 003234 152711  000004                   bisb #4,(r1)             ; set the bit
     766 003240 000400                           br 90$
     767                                90$:
     768 003242 000207                           rts pc
     769                                ;
     770                                ; -------------------------------------------------------------------
     771                                ;
     772                                ; kcproc - deal with keystrokes that require to xmit mult bytes
     773                                ;
     774                                kcproc:
     775 003244 042701  177400                   bic #177400,r1
     776 003250 162701  000340                   sub #kcminc,r1           ; subtract offset from code
     777 003254 042701  177700                   bic #177700,r1           ; make sure only 6 bits left
     778 003260 006301                           asl r1                   ; make word index
     779 003262 016100  004702                   mov kctab(r1),r0         ; find address of routine
     780 003266 004710                           jsr pc,(r0)              ; go there
     781 003270 000207                           rts pc
     782                                ;
     783                                ; left arrow
     784                                ;
     785                                fclar:
     786 003272 004767  001270                   jsr pc,xmitcsi           ; ESC [
     787 003276 012700  000104                   mov #104,r0              ; D
     788 003302 004767  011504                   jsr pc,xmit
     789 003306 000207                           rts pc
     790                                ;
     791                                ; down arrow
     792                                ;
     793                                fcdar:
     794 003310 004767  001252                   jsr pc,xmitcsi           ; ESC [
     795 003314 012700  000102                   mov #102,r0              ; B
     796 003320 004767  011466                   jsr pc,xmit
     797 003324 000207                           rts pc
     798                                ;
     799                                ; right arrow
     800                                ;
     801                                fcrar:
     802 003326 004767  001234                   jsr pc,xmitcsi           ; ESC [
     803 003332 012700  000103                   mov #103,r0              ; C
     804 003336 004767  011450                   jsr pc,xmit
     805 003342 000207                           rts pc
     806                                ;
     807                                ; up arrow
     808                                ;
     809                                fcuar:
     810 003344 004767  001216                   jsr pc,xmitcsi           ; ESC [
     811 003350 012700  000101                   mov #101,r0              ; A
     812 003354 004767  011432                   jsr pc,xmit
     813 003360 000207                           rts pc
     814                                ;
     815                                ; page down - there's no such thing on a real vt, so let's just do 20 down arrows
     816                                ;
     817                                fcpgdn:
     818 003362 012701  000024                   mov #20.,r1
     819                                10$:
     820 003366 004767  001174                   jsr pc,xmitcsi           ; ESC [
     821 003372 012700  000102                   mov #102,r0              ; B
     822 003376 004767  011410                   jsr pc,xmit
     823 003402 005301                           dec r1
     824 003404 001370                           bne 10$
     825 003406 000207                           rts pc
     826                                ;
     827                                ; page up - there's no such thing on a real vt, so let's just do 20 up arrows
     828                                ;
     829                                fcpgup:
     830 003410 012701  000024                   mov #20.,r1              ; weirdly, from the tests I've done it seems esc[20A is not accepted inbound. Hence 20 times esc[A
     831                                10$:
     832 003414 004767  001146                   jsr pc,xmitcsi           ; ESC [
     833 003420 012700  000101                   mov #101,r0              ; A
     834 003424 004767  011362                   jsr pc,xmit
     835 003430 005301                           dec r1
     836 003432 001370                           bne 10$
     837 003434 000207                           rts pc
     838                                ;
     839                                ; enter - either just cr, or crlf
     840                                ;
     841                                fcentr:
     842 003436 012700  000015                   mov #15,r0               ; cr
     843 003442 004767  011344                   jsr pc,xmit
     844 003446 005767  175072                   tst anslnm
     845 003452 001404                           beq 10$
     846 003454 012700  000012                   mov #12,r0               ; lf
     847 003460 004767  011326                   jsr pc,xmit
     848                                10$:
     849 003464 000207                           rts pc
     850                                ;
     851                                ; numlock - F1
     852                                ;
     853                                fcnlck:
     854 003466 012700  000033                   mov #33,r0               ; escape
     855 003472 004767  011314                   jsr pc,xmit
     856 003476 105767  175027                   tstb vt52                ; vt52 mode?
     857 003502 001004                           bne 52$                  ; yes, skip capital o
     858 003504 012700  000117                   mov #117,r0              ; capital o
     859 003510 004767  011276                   jsr pc,xmit
     860                                52$:
     861 003514 012700  000120                   mov #120,r0              ; capital p
     862 003520 004767  011266                   jsr pc,xmit
     863 003524 000207                           rts pc
     864                                ;
     865                                ; num pad div / - F2
     866                                ;
     867                                fcndiv:
     868 003526 012700  000033                   mov #33,r0               ; escape
     869 003532 004767  011254                   jsr pc,xmit
     870 003536 105767  174767                   tstb vt52                ; vt52 mode?
     871 003542 001004                           bne 52$                  ; yes, skip capital o
     872 003544 012700  000117                   mov #117,r0              ; capital o
     873 003550 004767  011236                   jsr pc,xmit
     874                                52$:
     875 003554 012700  000121                   mov #121,r0              ; capital q
     876 003560 004767  011226                   jsr pc,xmit
     877 003564 000207                           rts pc
     878                                ;
     879                                ; num pad asterisk - F3
     880                                ;
     881                                fcnast:
     882 003566 012700  000033                   mov #33,r0               ; escape
     883 003572 004767  011214                   jsr pc,xmit
     884 003576 105767  174727                   tstb vt52                ; vt52 mode?
     885 003602 001004                           bne 52$                  ; yes, skip capital o
     886 003604 012700  000117                   mov #117,r0              ; capital o
     887 003610 004767  011176                   jsr pc,xmit
     888                                52$:
     889 003614 012700  000122                   mov #122,r0              ; capital r
     890 003620 004767  011166                   jsr pc,xmit
     891 003624 000207                           rts pc
     892                                ;
     893                                ; num pad minus - F4
     894                                ;
     895                                fcnmin:
     896 003626 012700  000033                   mov #33,r0               ; escape
     897 003632 004767  011154                   jsr pc,xmit
     898 003636 105767  174667                   tstb vt52                ; vt52 mode?
     899 003642 001004                           bne 52$                  ; yes, skip capital o
     900 003644 012700  000117                   mov #117,r0              ; capital o
     901 003650 004767  011136                   jsr pc,xmit
     902                                52$:
     903 003654 012700  000123                   mov #123,r0              ; capital s
     904 003660 004767  011126                   jsr pc,xmit
     905 003664 000207                           rts pc
     906                                ;
     907                                ; num pad plus
     908                                ;
     909                                fcnpls:
     910 003666 105767  174656                   tstb deckpam             ; check keypad application mode flag
     911 003672 001005                           bne 10$                  ; on, go there
     912 003674 012700  000053                   mov #53,r0               ; plus
     913 003700 004767  011106                   jsr pc,xmit
     914 003704 000207                           rts pc
     915                                10$:                              ; not sure what to do with this yet. Nothing, for now
     916 003706 000207                           rts pc
     917                                ;
     918                                ; num pad enter
     919                                ;
     920                                fcnent:
     921 003710 105767  174634                   tstb deckpam             ; check keypad application mode flag
     922 003714 001003                           bne 10$                  ; on, go there
     923 003716 004767  177514                   jsr pc,fcentr
     924 003722 000207                           rts pc
     925                                10$:
     926 003724 004767  000710                   jsr pc,xkpad
     927 003730 012700  000115                   mov #115,r0              ; M
     928 003734 004767  011052                   jsr pc,xmit
     929 003740 000207                           rts pc
     930                                ;
     931                                ; num pad dot
     932                                ;
     933                                fcndot:
     934 003742 105767  174602                   tstb deckpam             ; check keypad application mode flag
     935 003746 001005                           bne 10$                  ; on, go there
     936 003750 012700  000056                   mov #56,r0               ; dot
     937 003754 004767  011032                   jsr pc,xmit
     938 003760 000207                           rts pc
     939                                10$:
     940 003762 004767  000652                   jsr pc,xkpad
     941 003766 012700  000156                   mov #156,r0              ; n
     942 003772 004767  011014                   jsr pc,xmit
     943 003776 000207                           rts pc
     944                                ;
     945                                ; num pad 0
     946                                ;
     947                                fcn0:
     948 004000 105767  174544                   tstb deckpam             ; check keypad application mode flag
     949 004004 001005                           bne 10$                  ; on, go there
     950 004006 012700  000060                   mov #60,r0               ; 0
     951 004012 004767  010774                   jsr pc,xmit
     952 004016 000207                           rts pc
     953                                10$:
     954 004020 004767  000614                   jsr pc,xkpad
     955 004024 012700  000160                   mov #160,r0              ; p
     956 004030 004767  010756                   jsr pc,xmit
     957 004034 000207                           rts pc
     958                                ;
     959                                ; num pad 1
     960                                ;
     961                                fcn1:
     962 004036 105767  174506                   tstb deckpam             ; check keypad application mode flag
     963 004042 001005                           bne 10$                  ; on, go there
     964 004044 012700  000061                   mov #61,r0               ; 1
     965 004050 004767  010736                   jsr pc,xmit
     966 004054 000207                           rts pc
     967                                10$:
     968 004056 004767  000556                   jsr pc,xkpad
     969 004062 012700  000161                   mov #161,r0              ; q
     970 004066 004767  010720                   jsr pc,xmit
     971 004072 000207                           rts pc
     972                                ;
     973                                ; num pad 2
     974                                ;
     975                                fcn2:
     976 004074 105767  174450                   tstb deckpam             ; check keypad application mode flag
     977 004100 001005                           bne 10$                  ; on, go there
     978 004102 012700  000062                   mov #62,r0               ; 2
     979 004106 004767  010700                   jsr pc,xmit
     980 004112 000207                           rts pc
     981                                10$:
     982 004114 004767  000520                   jsr pc,xkpad
     983 004120 012700  000162                   mov #162,r0              ; r
     984 004124 004767  010662                   jsr pc,xmit
     985 004130 000207                           rts pc
     986                                ;
     987                                ; num pad 3
     988                                ;
     989                                fcn3:
     990 004132 105767  174412                   tstb deckpam             ; check keypad application mode flag
     991 004136 001005                           bne 10$                  ; on, go there
     992 004140 012700  000063                   mov #63,r0               ; 3
     993 004144 004767  010642                   jsr pc,xmit
     994 004150 000207                           rts pc
     995                                10$:
     996 004152 004767  000462                   jsr pc,xkpad
     997 004156 012700  000163                   mov #163,r0              ; s
     998 004162 004767  010624                   jsr pc,xmit
     999 004166 000207                           rts pc
    1000                                ;
    1001                                ; num pad 4
    1002                                ;
    1003                                fcn4:
    1004 004170 105767  174354                   tstb deckpam             ; check keypad application mode flag
    1005 004174 001005                           bne 10$                  ; on, go there
    1006 004176 012700  000064                   mov #64,r0               ; 4
    1007 004202 004767  010604                   jsr pc,xmit
    1008 004206 000207                           rts pc
    1009                                10$:
    1010 004210 004767  000424                   jsr pc,xkpad
    1011 004214 012700  000164                   mov #164,r0              ; t
    1012 004220 004767  010566                   jsr pc,xmit
    1013 004224 000207                           rts pc
    1014                                ;
    1015                                ; num pad 5
    1016                                ;
    1017                                fcn5:
    1018 004226 105767  174316                   tstb deckpam             ; check keypad application mode flag
    1019 004232 001005                           bne 10$                  ; on, go there
    1020 004234 012700  000065                   mov #65,r0               ; 5
    1021 004240 004767  010546                   jsr pc,xmit
    1022 004244 000207                           rts pc
    1023                                10$:
    1024 004246 004767  000366                   jsr pc,xkpad
    1025 004252 012700  000165                   mov #165,r0              ; u
    1026 004256 004767  010530                   jsr pc,xmit
    1027 004262 000207                           rts pc
    1028                                ;
    1029                                ; num pad 6
    1030                                ;
    1031                                fcn6:
    1032 004264 105767  174260                   tstb deckpam             ; check keypad application mode flag
    1033 004270 001005                           bne 10$                  ; on, go there
    1034 004272 012700  000066                   mov #66,r0               ; 6
    1035 004276 004767  010510                   jsr pc,xmit
    1036 004302 000207                           rts pc
    1037                                10$:
    1038 004304 004767  000330                   jsr pc,xkpad
    1039 004310 012700  000166                   mov #166,r0              ; v
    1040 004314 004767  010472                   jsr pc,xmit
    1041 004320 000207                           rts pc
    1042                                ;
    1043                                ; num pad 7
    1044                                ;
    1045                                fcn7:
    1046 004322 105767  174222                   tstb deckpam             ; check keypad application mode flag
    1047 004326 001005                           bne 10$                  ; on, go there
    1048 004330 012700  000067                   mov #67,r0               ; 7
    1049 004334 004767  010452                   jsr pc,xmit
    1050 004340 000207                           rts pc
    1051                                10$:
    1052 004342 004767  000272                   jsr pc,xkpad
    1053 004346 012700  000167                   mov #167,r0              ; w
    1054 004352 004767  010434                   jsr pc,xmit
    1055 004356 000207                           rts pc
    1056                                ;
    1057                                ; num pad 8
    1058                                ;
    1059                                fcn8:
    1060 004360 105767  174164                   tstb deckpam             ; check keypad application mode flag
    1061 004364 001005                           bne 10$                  ; on, go there
    1062 004366 012700  000070                   mov #70,r0               ; 8
    1063 004372 004767  010414                   jsr pc,xmit
    1064 004376 000207                           rts pc
    1065                                10$:
    1066 004400 004767  000234                   jsr pc,xkpad
    1067 004404 012700  000170                   mov #170,r0              ; x
    1068 004410 004767  010376                   jsr pc,xmit
    1069 004414 000207                           rts pc
    1070                                ;
    1071                                ; num pad 9
    1072                                ;
    1073                                fcn9:
    1074 004416 105767  174126                   tstb deckpam             ; check keypad application mode flag
    1075 004422 001005                           bne 10$                  ; on, go there
    1076 004424 012700  000071                   mov #71,r0               ; 9
    1077 004430 004767  010356                   jsr pc,xmit
    1078 004434 000207                           rts pc
    1079                                10$:
    1080 004436 004767  000176                   jsr pc,xkpad
    1081 004442 012700  000171                   mov #171,r0              ; y
    1082 004446 004767  010340                   jsr pc,xmit
    1083 004452 000207                           rts pc
    1084                                ;
    1085                                ; ins
    1086                                ;
    1087                                fcins:
    1088 004454 000207                           rts pc
    1089                                ;
    1090                                ; home
    1091                                ;
    1092                                fchome:
    1093 004456 000207                           rts pc
    1094                                ;
    1095                                ; del
    1096                                ;
    1097                                fcdel:
    1098 004460 012700  000177                   mov #177,r0
    1099 004464 004767  010322                   jsr pc,xmit
    1100 004470 000207                           rts pc
    1101                                ;
    1102                                ; end
    1103                                ;
    1104                                fcend:
    1105 004472 000207                           rts pc
    1106                                ;
    1107                                ; f1
    1108                                ;
    1109                                fcf1:
    1110 004474 004767  000140                   jsr pc,xkpad
    1111 004500 012700  000120                   mov #120,r0              ; P
    1112 004504 004767  010302                   jsr pc,xmit
    1113 004510 000207                           rts pc
    1114                                ;
    1115                                ; f2
    1116                                ;
    1117                                fcf2:
    1118 004512 004767  000122                   jsr pc,xkpad
    1119 004516 012700  000121                   mov #121,r0              ; Q
    1120 004522 004767  010264                   jsr pc,xmit
    1121 004526 000207                           rts pc
    1122                                ;
    1123                                ; f3
    1124                                ;
    1125                                fcf3:
    1126 004530 004767  000104                   jsr pc,xkpad
    1127 004534 012700  000122                   mov #122,r0              ; R
    1128 004540 004767  010246                   jsr pc,xmit
    1129 004544 000207                           rts pc
    1130                                ;
    1131                                ; f4
    1132                                ;
    1133                                fcf4:
    1134 004546 004767  000066                   jsr pc,xkpad
    1135 004552 012700  000123                   mov #123,r0              ; S
    1136 004556 004767  010230                   jsr pc,xmit
    1137 004562 000207                           rts pc
    1138                                ;
    1139                                ; dummy for unused table entries
    1140                                ;
    1141                                fcnull:
    1142 004564 000207                           rts pc
    1143                                ;
    1144                                ; xmit escape-[
    1145                                ; except when in vt52 mode, then just xmit escape
    1146                                ;
    1147                                xmitcsi:
    1148 004566 012700  000033                   mov #33,r0               ; esc
    1149 004572 004767  010214                   jsr pc,xmit
    1150 004576 105767  173727                   tstb vt52                ; check for vt52 mode
    1151 004602 001015                           bne 90$                  ; skip the rest if yes
    1152 004604 105767  173737                   tstb decckm              ; cursor key mode flag set?
    1153 004610 001005                           bne 10$
    1154 004612 012700  000133                   mov #133,r0              ; [
    1155 004616 004767  010170                   jsr pc,xmit
    1156 004622 000405                           br 90$
    1157                                10$:
    1158 004624 012700  000117                   mov #117,r0              ; capital o
    1159 004630 004767  010156                   jsr pc,xmit
    1160 004634 000400                           br 90$
    1161                                90$:
    1162 004636 000207                           rts pc
    1163                                ;
    1164                                ; xmit escape-? or escape-O depending on ansi-vt52 switch for the numeric keypad
    1165                                ;
    1166                                xkpad:
    1167 004640 012700  000033                   mov #33,r0               ; escape
    1168 004644 004767  010142                   jsr pc,xmit
    1169 004650 105767  173655                   tstb vt52                ; in vt52 mode?
    1170 004654 001005                           bne 52$                  ; yes, go there
    1171 004656 012700  000117                   mov #117,r0              ; capital o
    1172 004662 004767  010124                   jsr pc,xmit
    1173 004666 000207                           rts pc
    1174                                52$:
    1175 004670 012700  000077                   mov #77,r0               ; question mark
    1176 004674 004767  010112                   jsr pc,xmit
    1177 004700 000207                           rts pc
    1178                                ;
    1179                                ; key codes for keys that need more than a one-to-one translation
    1180                                ;
    1181 000340                         kcminc   = 340
    1182 000340                         kcf4     = 340
    1183 000341                         kclar    = 341
    1184 000342                         kcdar    = 342
    1185 000343                         kcrar    = 343
    1186 000344                         kcuar    = 344
    1187 000345                         kcpgdn   = 345
    1188 000346                         kcpgup   = 346
    1189 000347                         kcentr   = 347
    1190 000350                         kcndiv   = 350
    1191 000351                         kcnlck   = 351
    1192 000352                         kcnent   = 352
    1193 000353                         kcnast   = 353
    1194 000354                         kcnmin   = 354
    1195 000355                         kcnpls   = 355
    1196 000356                         kcndot   = 356
    1197 000357                         kcn0     = 357
    1198 000360                         kcn1     = 360
    1199 000361                         kcn2     = 361
    1200 000362                         kcn3     = 362
    1201 000363                         kcn4     = 363
    1202 000364                         kcn5     = 364
    1203 000365                         kcn6     = 365
    1204 000366                         kcn7     = 366
    1205 000367                         kcn8     = 367
    1206 000370                         kcn9     = 370
    1207 000371                         kcins    = 371
    1208 000372                         kchome   = 372
    1209 000373                         kcdel    = 373
    1210 000374                         kcend    = 374
    1211 000375                         kcf1     = 375
    1212 000376                         kcf2     = 376
    1213 000377                         kcf3     = 377
    1214                                ;
    1215                                ; kctab - function table for mult-byte keys
    1216                                ;
    1217                                kctab:
    1218 004702 004546                           .word fcf4               ; 340 f4
    1219 004704 003272                           .word fclar              ; 341 left arrow
    1220 004706 003310                           .word fcdar              ; 342 down arrow
    1221 004710 003326                           .word fcrar              ; 343 right arrow
    1222 004712 003344                           .word fcuar              ; 344 up arrow
    1223 004714 003362                           .word fcpgdn             ; 345 pg dn
    1224 004716 003410                           .word fcpgup             ; 346 pg up
    1225 004720 003436                           .word fcentr             ; 347 enter
    1226 004722 003526                           .word fcndiv             ; 350 num pad div
    1227 004724 003466                           .word fcnlck             ; 351 numlock
    1228 004726 003710                           .word fcnent             ; 352 num pad enter
    1229 004730 003566                           .word fcnast             ; 353 num pad asterisk
    1230 004732 003626                           .word fcnmin             ; 354 num pad minus
    1231 004734 003666                           .word fcnpls             ; 355 num pad plus
    1232 004736 003742                           .word fcndot             ; 356 num pad dot/del
    1233 004740 004000                           .word fcn0               ; 357 num pad 0
    1234 004742 004036                           .word fcn1               ; 360 num pad 1
    1235 004744 004074                           .word fcn2               ; 361 num pad 2
    1236 004746 004132                           .word fcn3               ; 362 num pad 3
    1237 004750 004170                           .word fcn4               ; 363 num pad 4
    1238 004752 004226                           .word fcn5               ; 364 num pad 5
    1239 004754 004264                           .word fcn6               ; 365 num pad 6
    1240 004756 004322                           .word fcn7               ; 366 num pad 7
    1241 004760 004360                           .word fcn8               ; 367 num pad 7
    1242 004762 004416                           .word fcn9               ; 370 num pad 9
    1243 004764 004454                           .word fcins              ; 371 ins
    1244 004766 004456                           .word fchome             ; 372 home
    1245 004770 004460                           .word fcdel              ; 373 del
    1246 004772 004472                           .word fcend              ; 374 end
    1247 004774 004474                           .word fcf1               ; 375 f1
    1248 004776 004512                           .word fcf2               ; 376 f2
    1249 005000 004530                           .word fcf3               ; 377 f3
    1250                                ;
    1251                                ; -------------------------------------------------------------------
    1252                                ;
    1253                                ; decaln - fill buffer with E
    1254                                ;
    1255                                decaln:
    1256 005002 004767  000204                   jsr pc,clrdwh            ; clear double height/double width
    1257 005006 012700  100000                   mov #100000,r0           ; setup r0 as start address
    1258 005012 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1259                                80$:
    1260 005016 012720  000105                   mov #105,(r0)+           ; E
    1261 005022 020001                           cmp r0,r1
    1262 005024 103774                           blo 80$
    1263 005026 000207                           rts pc
    1264                                ;
    1265                                ; -------------------------------------------------------------------
    1266                                ;
    1267                                ; decdhl t - double height, top half
    1268                                ;
    1269                                decdht:
    1270 005030 016700  173320                   mov curr,r0              ; get current line
    1271 005034 005300                           dec r0                   ; subtract one to get to offset from start
    1272 005036 112760  000005  140040           movb #5,vgadwh(r0)       ; set double height bit and double width bit
    1273 005044 004767  000062                   jsr pc,adjdwh            ; adjust cursor and clear 2nd half of line
    1274 005050 000207                           rts pc
    1275                                ;
    1276                                ; -------------------------------------------------------------------
    1277                                ;
    1278                                ; decdhl b - double height, bottom half
    1279                                ;
    1280                                decdhb:
    1281 005052 016700  173276                   mov curr,r0              ; get current line
    1282 005056 005300                           dec r0                   ; subtract one to get to offset from start
    1283 005060 112760  000007  140040           movb #7,vgadwh(r0)       ; set double height plus low, and double width bits
    1284 005066 004767  000040                   jsr pc,adjdwh            ; adjust cursor and clear 2nd half of line
    1285 005072 000207                           rts pc
    1286                                ;
    1287                                ; -------------------------------------------------------------------
    1288                                ;
    1289                                ; decdwl - double width
    1290                                ;
    1291                                decdwl:
    1292 005074 016700  173254                   mov curr,r0              ; get current line
    1293 005100 005300                           dec r0                   ; subtract one to get to offset from start
    1294 005102 112760  000004  140040           movb #4,vgadwh(r0)       ; set double width bit
    1295 005110 004767  000016                   jsr pc,adjdwh            ; adjust cursor and clear 2nd half of line
    1296 005114 000207                           rts pc
    1297                                ;
    1298                                ; -------------------------------------------------------------------
    1299                                ;
    1300                                ; decswl - single width/single height
    1301                                ;
    1302                                decswl:
    1303 005116 016700  173232                   mov curr,r0              ; get current line
    1304 005122 005300                           dec r0                   ; subtract one to get to offset from start
    1305 005124 105060  140040                   clrb vgadwh(r0)          ; clear both double height and the double width bit
    1306 005130 000207                           rts pc
    1307                                ;
    1308                                ; -------------------------------------------------------------------
    1309                                ;
    1310                                ; adjdwh - adjust cursor pos and line content on changing a line to double height/width
    1311                                ;
    1312                                adjdwh:
    1313 005132 026727  173222  000050           cmp curc,#40.            ; is the cursor past column 40 decimal?
    1314 005140 101403                           blos 10$                 ; no
    1315 005142 012767  000050  173210           mov #40.,curc            ; set it at 40
    1316                                10$:
    1317 005150 016700  173200                   mov curr,r0              ; get current row
    1318 005154 010001                           mov r0,r1                ; copy
    1319 005156 005300                           dec r0                   ; correct for offset
    1320 005160 006300                           asl r0                   ; make word index
    1321 005162 016000  016556                   mov ltab(r0),r0          ; pick up the offset
    1322 005166 062700  000120                   add #80.,r0              ; add half the screen width - two bytes per pos, hence 80.
    1323 005172 006301                           asl r1                   ; word index of current line+1 - the +1 is implicit
    1324 005174 016101  016556                   mov ltab(r1),r1          ; pick up the offset
    1325                                20$:
    1326 005200 012720  000040                   mov #40,(r0)+            ; erase here
    1327 005204 020001                           cmp r0,r1                ; at the end yet?
    1328 005206 103774                           blo 20$                  ; branch if not
    1329 005210 000207                           rts pc                   ; done
    1330                                ;
    1331                                ; -------------------------------------------------------------------
    1332                                ;
    1333                                ; clrdwh - clear all double height/width bits
    1334                                ;
    1335                                clrdwh:
    1336 005212 010146                           mov r1,-(r6)             ; push r1
    1337 005214 010046                           mov r0,-(r6)             ; push r0
    1338 005216 012700  140040                   mov #vgadwh,r0           ; load start
    1339 005222 012701  140070                   mov #vgadwh+24.,r1       ; load end
    1340                                10$:
    1341 005226 005020                           clr (r0)+                ; clear (two bytes at a time)
    1342 005230 020001                           cmp r0,r1                ; at end yet?
    1343 005232 103775                           blo 10$
    1344 005234 012600                           mov (r6)+,r0             ; pop r0
    1345 005236 012601                           mov (r6)+,r1             ; pop r1
    1346 005240 000207                           rts pc
    1347                                ;
    1348                                ; -------------------------------------------------------------------
    1349                                ;
    1350                                ; clrdw0 - clear double height/width bits from (including) cursor line
    1351                                ;
    1352                                clrdw0:
    1353 005242 010146                           mov r1,-(r6)             ; push r1
    1354 005244 010046                           mov r0,-(r6)             ; push r0
    1355 005246 012700  140040                   mov #vgadwh,r0           ; load start
    1356 005252 066700  173076                   add curr,r0              ; add cursor line
    1357 005256 005300                           dec r0                   ; correct line number to offset
    1358 005260 012701  140070                   mov #vgadwh+24.,r1       ; load end
    1359                                10$:
    1360 005264 105020                           clrb (r0)+               ; clear
    1361 005266 020001                           cmp r0,r1                ; at end yet?
    1362 005270 103775                           blo 10$
    1363 005272 012600                           mov (r6)+,r0             ; pop r0
    1364 005274 012601                           mov (r6)+,r1             ; pop r1
    1365 005276 000207                           rts pc
    1366                                ;
    1367                                ; -------------------------------------------------------------------
    1368                                ;
    1369                                ; clrdw1 - clear double height/width bits up to (including) cursor line
    1370                                ;
    1371                                clrdw1:
    1372 005300 010146                           mov r1,-(r6)             ; push r1
    1373 005302 010046                           mov r0,-(r6)             ; push r0
    1374 005304 012700  140040                   mov #vgadwh,r0           ; load start
    1375 005310 010001                           mov r0,r1                ; copy
    1376 005312 066701  173036                   add curr,r1              ; add cursor line number
    1377                                10$:
    1378 005316 105020                           clrb (r0)+               ; clear
    1379 005320 020001                           cmp r0,r1                ; at end yet?
    1380 005322 103775                           blo 10$
    1381 005324 012600                           mov (r6)+,r0             ; pop r0
    1382 005326 012601                           mov (r6)+,r1             ; pop r1
    1383 005330 000207                           rts pc
    1384                                ;
    1385                                ; -------------------------------------------------------------------
    1386                                ;
    1387                                ; clrscr - clear entire screen
    1388                                ;
    1389                                clrscr:
    1390 005332 010146                           mov r1,-(r6)             ; push r1
    1391 005334 010046                           mov r0,-(r6)             ; push r0
    1392 005336 012700  100000                   mov #100000,r0           ; setup r0 as start address
    1393 005342 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1394                                10$:
    1395 005346 012720  000040                   mov #40,(r0)+            ; space, no attributes
    1396 005352 020001                           cmp r0,r1                ; reached end?
    1397 005354 103774                           blo 10$                  ; no again
    1398 005356 012767  000001  172770           mov #rowmin,curr         ; cursor to row 1
    1399 005364 012767  000001  172766           mov #colmin,curc         ; cursor to col 1
    1400 005372 105067  172766                   clrb lcf                 ; clear lcf flag
    1401 005376 004767  177610                   jsr pc,clrdwh            ; clear line attributes too
    1402 005402 012600                           mov (r6)+,r0             ; pop r0
    1403 005404 012601                           mov (r6)+,r1             ; pop r1
    1404 005406 000207                           rts pc
    1405                                ;
    1406                                ; -------------------------------------------------------------------
    1407                                ;
    1408                                ; ESC 1 - DECGON - Graphics Waveform Generator On
    1409                                ;
    1410                                esc1:
    1411 005410 022737  000151  140012           cmp #105.,@#vgavtt       ; check for vt type
    1412 005416 001003                           bne 10$                  ; not 105, skip setting graph mode
    1413 005420 112767  000001  173105           movb #1,vt105g           ; this enables the graphic parser
    1414                                10$:
    1415 005426 000207                           rts pc
    1416                                ;
    1417                                ; -------------------------------------------------------------------
    1418                                ;
    1419                                ; ESC 2 - DECGOFF - Graphics Waveform Generator Off
    1420                                ;
    1421                                esc2:
    1422 005430 105067  173077                   clrb vt105g
    1423 005434 000207                           rts pc
    1424                                ;
    1425                                ; -------------------------------------------------------------------
    1426                                ;
    1427                                ; ESC 7 - DECSC - Save Cursor
    1428                                ;
    1429                                esc7:
    1430 005436 016767  172712  172712           mov curr,scurr
    1431 005444 016767  172710  172710           mov curc,scurc
    1432 005452 116767  172706  172705           movb lcf,slcf
    1433 005460 116767  172706  172705           movb chrset,schrst
    1434 005466 116767  172674  172673           movb atth,satth
    1435 005474 000207                           rts pc
    1436                                ;
    1437                                ; -------------------------------------------------------------------
    1438                                ;
    1439                                ; ESC 8 - DECRC - Restore Cursor
    1440                                ;
    1441                                esc8:
    1442 005476 016767  172654  172650           mov scurr,curr
    1443 005504 016767  172652  172646           mov scurc,curc
    1444 005512 116767  172647  172644           movb slcf,lcf
    1445 005520 116767  172647  172644           movb schrst,chrset
    1446 005526 116767  172635  172632           movb satth,atth
    1447 005534 004767  003312                   jsr pc,fba
    1448 005540 000207                           rts pc
    1449                                ;
    1450                                ; -------------------------------------------------------------------
    1451                                ;
    1452                                ; ESC 3c - VT52 Enter ANSI Mode
    1453                                ;
    1454                                esc3c:
    1455 005542 105067  172763                   clrb vt52
    1456 005546 000207                           rts pc
    1457                                ;
    1458                                ; -------------------------------------------------------------------
    1459                                ;
    1460                                ; ESC 3d - DECKPAM set keypad application mode
    1461                                ;
    1462                                esc3d:
    1463 005550 112767  000001  172772           movb #1,deckpam
    1464 005556 000207                           rts pc
    1465                                ;
    1466                                ; -------------------------------------------------------------------
    1467                                ;
    1468                                ; ESC 3e - DECKPNM set keupad numeric mode - reset keypad application mode
    1469                                ;
    1470                                esc3e:
    1471 005560 105067  172764                   clrb deckpam
    1472 005564 000207                           rts pc
    1473                                ;
    1474                                ; -------------------------------------------------------------------
    1475                                ;
    1476                                ; ESC A - VT52 Cursor Up
    1477                                ;
    1478                                escua:
    1479 005566 005367  172562                   dec curr                 ; subtract one
    1480 005572 004767  003254                   jsr pc,fba               ; normalize
    1481 005576 000207                           rts pc
    1482                                ;
    1483                                ; -------------------------------------------------------------------
    1484                                ;
    1485                                ; ESC B - VT52 Cursor Down
    1486                                ;
    1487                                escub:
    1488 005600 005267  172550                   inc curr                 ; add one
    1489 005604 004767  003242                   jsr pc,fba               ; normalize
    1490 005610 000207                           rts pc
    1491                                ;
    1492                                ; -------------------------------------------------------------------
    1493                                ;
    1494                                ; ESC C - VT52 Cursor Right
    1495                                ;
    1496                                escuc:
    1497 005612 005267  172542                   inc curc                 ; add one
    1498 005616 004767  003230                   jsr pc,fba               ; normalize
    1499 005622 000207                           rts pc
    1500                                ;
    1501                                ; -------------------------------------------------------------------
    1502                                ;
    1503                                ; ESC D - IND - Index; VT52 Cursor Left
    1504                                ;
    1505                                escud:
    1506 005624 105767  172701                   tstb vt52                ; check for vt52 mode
    1507 005630 001014                           bne 52$                  ; on, go there
    1508 005632 026767  172542  172514           cmp wsize,curr           ; at last row?
    1509 005640 001403                           beq 10$                  ; yes
    1510 005642 005267  172506                   inc curr                 ; no, just move the cursor one down
    1511 005646 000402                           br 90$
    1512                                10$:
    1513 005650 004767  003354                   jsr pc,scrl              ; scroll the screen up
    1514                                90$:
    1515 005654 105067  172504                   clrb lcf                 ; not for vt100
    1516 005660 000207                           rts pc
    1517                                ;
    1518                                52$:
    1519 005662 005367  172472                   dec curc                 ; subtract one
    1520 005666 004767  003160                   jsr pc,fba               ; normalize
    1521 005672 000207                           rts pc
    1522                                ;
    1523                                ; -------------------------------------------------------------------
    1524                                ;
    1525                                ; ESC E - NEL - Next Line
    1526                                ;
    1527                                escue:
    1528 005674 012767  000001  172456           mov #colmin,curc         ; set first col
    1529 005702 026767  172472  172444           cmp wsize,curr           ; at last row?
    1530 005710 001403                           beq 10$                  ; yes
    1531 005712 005267  172436                   inc curr                 ; no, just move the cursor one down
    1532 005716 000402                           br 90$
    1533                                10$:
    1534 005720 004767  003304                   jsr pc,scrl              ; scroll the screen up
    1535                                90$:
    1536 005724 105067  172434                   clrb lcf                 ; not for vt100
    1537 005730 000207                           rts pc
    1538                                ;
    1539                                ; -------------------------------------------------------------------
    1540                                ;
    1541                                ; ESC F - VT52 Enter Special Graphic Character Mode
    1542                                ;
    1543                                ; dummy for now; these characters are not in the current set, nor is there space in the font rom for them
    1544                                ;
    1545                                escuf:
    1546 005732 000207                           rts pc
    1547                                ;
    1548                                ; -------------------------------------------------------------------
    1549                                ;
    1550                                ; ESC G - VT52 Exit Special Graphic Character Mode
    1551                                ;
    1552                                escug:
    1553 005734 000207                           rts pc
    1554                                ;
    1555                                ;
    1556                                ; -------------------------------------------------------------------
    1557                                ;
    1558                                ; ESC H - Set Tab; VT52 Cursor to Home
    1559                                ;
    1560                                escuh:
    1561 005736 105767  172567                   tstb vt52                ; vt52 mode on?
    1562 005742 001007                           bne 52$                  ; yes, go there
    1563 005744 016700  172410                   mov curc,r0              ; pickup current column
    1564 005750 005300                           dec r0                   ; adjust
    1565 005752 112760  000001  000402           movb #1,tabtab(r0)       ; set tab
    1566 005760 000207                           rts pc
    1567                                52$:
    1568 005762 012767  000001  172370           mov #colmin,curc         ; set home pos in current column
    1569 005770 012767  000001  172356           mov #rowmin,curr         ; set home pos in current row
    1570 005776 000207                           rts pc
    1571                                ;
    1572                                ; -------------------------------------------------------------------
    1573                                ;
    1574                                ; ESC I - VT52 Reverse Line Feed
    1575                                ;
    1576                                escui:
    1577 006000 022767  000001  172346           cmp #rowmin,curr         ; at first row?
    1578 006006 001403                           beq 10$                  ; yes
    1579 006010 005367  172340                   dec curr                 ; no, just move the cursor one up
    1580 006014 000402                           br 90$
    1581                                10$:
    1582 006016 004767  003340                   jsr pc,rscrl             ; scroll the screen down
    1583                                90$:
    1584 006022 105067  172336                   clrb lcf
    1585 006026 000207                           rts pc
    1586                                ;
    1587                                ; -------------------------------------------------------------------
    1588                                ;
    1589                                ; ESC J - VT52 Erase to End of Screen
    1590                                ;
    1591                                escuj:
    1592 006030 004767  003016                   jsr pc,fba               ; get buffer address of cursor
    1593 006034 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1594                                80$:
    1595 006040 012720  000040                   mov #40,(r0)+            ; erase here
    1596 006044 020001                           cmp r0,r1                ; done with loop?
    1597 006046 103774                           blo 80$                  ; branch if not
    1598                                90$:
    1599 006050 000207                           rts pc
    1600                                ;
    1601                                ; -------------------------------------------------------------------
    1602                                ;
    1603                                ; ESC K - VT52 Erase to End of Line
    1604                                ;
    1605                                escuk:
    1606 006052 004767  002774                   jsr pc,fba               ; get buffer address of cursor
    1607 006056 016701  172272                   mov curr,r1              ; erase from cursor to end of line; start with finding the end of the current line
    1608 006062 006301                           asl r1                   ; word index of current line+1 - the +1 is implicit
    1609 006064 016101  016556                   mov ltab(r1),r1          ; pick up the offset
    1610                                80$:
    1611 006070 012720  000040                   mov #40,(r0)+            ; erase here
    1612 006074 020001                           cmp r0,r1                ; at the end yet?
    1613 006076 103774                           blo 80$                  ; branch if not
    1614                                90$:
    1615 006100 000207                           rts pc
    1616                                ;
    1617                                ; -------------------------------------------------------------------
    1618                                ;
    1619                                ; ESC M - RI - Reverse Index
    1620                                ;
    1621                                escum:
    1622 006102 105767  172444                   tstb decom               ; is origin mode on?
    1623 006106 001007                           bne 10$                  ; yes
    1624 006110 026767  172260  172236           cmp tmarg,curr           ; at top of viewport?
    1625 006116 001412                           beq 80$                  ; yes
    1626 006120 005367  172230                   dec curr                 ; no, just move the cursor one up
    1627 006124 000411                           br 90$
    1628                                ;
    1629                                10$:
    1630 006126 022767  000001  172220           cmp #rowmin,curr         ; at first row?
    1631 006134 001403                           beq 80$                  ; yes
    1632 006136 005367  172212                   dec curr                 ; no, just move the cursor one up
    1633 006142 000402                           br 90$
    1634                                
    1635                                80$:
    1636 006144 004767  003212                   jsr pc,rscrl             ; scroll the screen down
    1637                                90$:
    1638 006150 105067  172210                   clrb lcf                 ; not for vt100
    1639 006154 000207                           rts pc
    1640                                ;
    1641                                ; -------------------------------------------------------------------
    1642                                ;
    1643                                ; ESC Z - DECID - Identify Terminal; VT52 Identify
    1644                                ;
    1645                                escuz:
    1646 006156 105767  172347                   tstb vt52                ; in vt52 mode?
    1647 006162 001003                           bne 52$                  ; branch if we are
    1648 006164 004767  001166                   jsr pc,csilc             ; go to CSI c routine
    1649 006170 000207                           rts pc                   ; done
    1650                                52$:
    1651 006172 112700  000033                   movb #33,r0              ; escape
    1652 006176 004767  006610                   jsr pc,xmit              ; send it
    1653 006202 112700  000057                   movb #57,r0              ; /
    1654 006206 004767  006600                   jsr pc,xmit              ; send it
    1655 006212 112700  000132                   movb #132,r0             ; Z
    1656 006216 004767  006570                   jsr pc,xmit              ; send it
    1657 006222 000207                           rts pc                   ; done
    1658                                ;
    1659                                ; -------------------------------------------------------------------
    1660                                ;
    1661                                ; ESC c - RIS - Reset to Initial State
    1662                                ;
    1663                                esclc:
    1664 006224 000167  172550                   jmp t42
    1665                                ;
    1666                                ; -------------------------------------------------------------------
    1667                                ;
    1668                                ; CSI @ - ICH Insert Characters (VT200)
    1669                                ;
    1670                                csiat:
    1671 006230 010246                           mov r2,-(r6)             ; push r2
    1672 006232 004767  002614                   jsr pc,fba               ; get cursor address
    1673 006236 010002                           mov r0,r2                ; move cursor address into r2
    1674                                10$:
    1675 006240 016700  172110                   mov curr,r0              ; load curr
    1676 006244 006300                           asl r0                   ; word index
    1677 006246 016000  016556                   mov ltab(r0),r0          ; get start address of next line
    1678 006252 010001                           mov r0,r1                ; copy
    1679 006254 005301                           dec r1                   ; two
    1680 006256 005301                           dec r1                   ; ... less
    1681 006260 020102                           cmp r1,r2                ; same? then we'd be on colmax
    1682 006262 001414                           beq 80$                  ; skip rest if so - no action if on last col
    1683                                60$:
    1684 006264 014140                           mov -(r1),-(r0)          ; do the move
    1685 006266 020102                           cmp r1,r2                ; compare addresses
    1686 006270 101375                           bhi 60$                  ; loop if r1>r2 still
    1687 006272 012712  000040                   mov #40,(r2)             ; insert blank, no attributes at cursor
    1688 006276 022767  000001  172274           cmp #1,parm1             ; check if we need to do more?
    1689 006304 001403                           beq 80$                  ; no, exit
    1690 006306 005367  172266                   dec parm1                ; subtract one
    1691 006312 000752                           br 10$                   ; go do another round
    1692                                80$:
    1693 006314 012602                           mov (r6)+,r2             ; pop r2
    1694 006316 000207                           rts pc
    1695                                ;
    1696                                ; -------------------------------------------------------------------
    1697                                ;
    1698                                ; CSI A - CUU Cursor Up
    1699                                ;
    1700                                csiua:
    1701 006320 166767  172254  172026           sub parm1,curr
    1702 006326 004767  002520                   jsr pc,fba
    1703 006332 105067  172026                   clrb lcf
    1704 006336 000207                           rts pc
    1705                                ;
    1706                                ; -------------------------------------------------------------------
    1707                                ;
    1708                                ; CSI B - CUD Cursor Down
    1709                                ;
    1710                                csiub:
    1711 006340 066767  172234  172006           add parm1,curr
    1712 006346 004767  002500                   jsr pc,fba
    1713 006352 105067  172006                   clrb lcf                 ; not sure about this
    1714 006356 000207                           rts pc
    1715                                ;
    1716                                ; -------------------------------------------------------------------
    1717                                ;
    1718                                ; CSI C - CUF Cursor Forward
    1719                                ;
    1720                                csiuc:
    1721 006360 066767  172214  171772           add parm1,curc
    1722 006366 004767  002460                   jsr pc,fba
    1723 006372 105067  171766                   clrb lcf                 ; not for vt100
    1724 006376 000207                           rts pc
    1725                                ;
    1726                                ; -------------------------------------------------------------------
    1727                                ;
    1728                                ; CSI D - CUD Cursor Backward
    1729                                ;
    1730                                csiud:
    1731 006400 166767  172174  171752           sub parm1,curc
    1732 006406 004767  002440                   jsr pc,fba
    1733 006412 105067  171746                   clrb lcf                ; not sure about this
    1734 006416 000207                           rts pc
    1735                                ;
    1736                                ; -------------------------------------------------------------------
    1737                                ;
    1738                                ; CSI H - CUP Cursor Position
    1739                                ;
    1740                                csiuh:
    1741 006420 016767  172154  171726           mov parm1,curr
    1742 006426 016767  172150  171724           mov parm2,curc
    1743 006434 004767  002412                   jsr pc,fba
    1744 006440 105067  171720                   clrb lcf                 ; not for vt100
    1745 006444 000207                           rts pc
    1746                                ;
    1747                                ; -------------------------------------------------------------------
    1748                                ;
    1749                                ; CSI J - ED Erase In Display
    1750                                ;
    1751                                csiuj:
    1752 006446 004767  002400                   jsr pc,fba               ; get buffer address of cursor
    1753 006452 005767  172100                   tst parmt                ; check raw parameter for zero - means from (including) cursor to end of screen
    1754 006456 001005                           bne 10$                  ; no, other form
    1755 006460 004767  176556                   jsr pc,clrdw0            ; clear double heigth/double width bits
    1756 006464 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1757 006470 000433                           br 80$
    1758                                ;
    1759                                10$:
    1760 006472 022767  000001  172056           cmp #1,parmt             ; 1? means from start of screen up to (including) cursor
    1761 006500 001007                           bne 20$                  ; no
    1762 006502 004767  176572                   jsr pc,clrdw1            ; clear double heigth/double width bits
    1763 006506 010001                           mov r0,r1                ; setup cursor buffer address as end condition
    1764 006510 005201                           inc r1                   ; add one
    1765 006512 012700  100000                   mov #100000,r0           ; setup r0 as start address
    1766 006516 000420                           br 80$
    1767                                ;
    1768                                20$:
    1769 006520 022767  000002  172030           cmp #2,parmt             ; 2? means clear whole screen
    1770 006526 001405                           beq 21$                  ; yes, deal with it
    1771 006530 022767  000003  172020           cmp #3,parmt             ; 3? this means clear everything including scrollback. Not vt100/105/200/220, but lets do it anyway.
    1772 006536 001401                           beq 21$
    1773 006540 000407                           br 80$
    1774                                21$:
    1775 006542 004767  176444                   jsr pc,clrdwh            ; clear double height/double width
    1776 006546 012700  100000                   mov #100000,r0           ; setup r0 as start address
    1777 006552 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1778 006556 000400                           br 80$
    1779                                80$:
    1780 006560 012720  000040                   mov #40,(r0)+            ; erase here
    1781 006564 020001                           cmp r0,r1
    1782 006566 103774                           blo 80$
    1783 006570 000400                           br 90$
    1784                                90$:
    1785 006572 105067  171566                   clrb lcf                 ; not for vt100
    1786 006576 000207                           rts pc
    1787                                ;
    1788                                ; -------------------------------------------------------------------
    1789                                ;
    1790                                ; CSI K - EL Erase In Line
    1791                                ;
    1792                                csiuk:
    1793 006600 004767  002246                   jsr pc,fba               ; get buffer address of cursor
    1794 006604 005767  171746                   tst parmt                ; check raw parameter for zero
    1795 006610 001006                           bne 10$                  ; no - other form
    1796 006612 016701  171536                   mov curr,r1              ; 0 or default: erase from cursor to end of line
    1797 006616 006301                           asl r1                   ; word index of current line+1 - the +1 is implicit
    1798 006620 016101  016556                   mov ltab(r1),r1          ; pick up the offset
    1799 006624 000435                           br 80$
    1800                                10$:
    1801 006626 022767  000001  171722           cmp #1,parmt             ; check raw parameter for one
    1802 006634 001011                           bne 20$                  ; no
    1803 006636 010001                           mov r0,r1                ; setup r1 as ending condition
    1804 006640 005201                           inc r1                   ; add one
    1805 006642 016700  171506                   mov curr,r0              ; 1 : erase from beginning of line to cursor
    1806 006646 005300                           dec r0                   ; start from zero
    1807 006650 006300                           asl r0                   ; word index of current line
    1808 006652 016000  016556                   mov ltab(r0),r0          ; pick up the offset
    1809 006656 000420                           br 80$
    1810                                20$:
    1811 006660 022767  000002  171670           cmp #2,parmt             ; check raw parameter for two
    1812 006666 001021                           bne 90$                  ; no - outtahere
    1813 006670 016700  171460                   mov curr,r0              ; 1 : erase from beginning of line to cursor
    1814 006674 005300                           dec r0                   ; start from zero
    1815 006676 006300                           asl r0                   ; word index of current line
    1816 006700 016000  016556                   mov ltab(r0),r0          ; pick up the offset
    1817 006704 016701  171444                   mov curr,r1              ; 0 or default: erase from cursor to end of line
    1818 006710 006301                           asl r1                   ; word index of current line+1 - the +1 is implicit
    1819 006712 016101  016556                   mov ltab(r1),r1          ; pick up the offset
    1820 006716 000400                           br 80$
    1821                                80$:
    1822 006720 012720  000040                   mov #40,(r0)+            ; erase here
    1823 006724 020001                           cmp r0,r1
    1824 006726 103774                           blo 80$
    1825 006730 000400                           br 90$
    1826                                90$:
    1827 006732 105067  171426                   clrb lcf                 ; not for vt100
    1828 006736 000207                           rts pc
    1829                                ;
    1830                                ; -------------------------------------------------------------------
    1831                                ;
    1832                                ; CSI L - IL Insert Line (VT102)
    1833                                ;
    1834                                csiul:
    1835 006740 010246                           mov r2,-(r6)             ; push r2
    1836 006742 026767  171406  171430           cmp curr,wsize           ; check if we are in the current scroll area
    1837 006750 101043                           bhi 90$                  ; no, done here - IL is not effective outside the scroll area
    1838 006752 016700  171420                   mov bmarg,r0             ; get bottom margin
    1839 006756 006300                           asl r0                   ; word index
    1840 006760 016000  016556                   mov ltab(r0),r0          ; get address of where to
    1841                                
    1842 006764 016701  171406                   mov bmarg,r1             ; get bottom margin
    1843 006770 166701  171604                   sub parm1,r1             ; minus number of lines
    1844 006774 006301                           asl r1                   ; word index
    1845 006776 016101  016556                   mov ltab(r1),r1          ; get address of where from
    1846                                
    1847 007002 016702  171366                   mov tmarg,r2             ; get top margin
    1848 007006 005302                           dec r2                   ; minus offset
    1849 007010 066702  171340                   add curr,r2              ; add current row
    1850 007014 005302                           dec r2                   ; minus offset
    1851 007016 006302                           asl r2                   ; make word index
    1852 007020 016202  016556                   mov ltab(r2),r2          ; get ending address
    1853 007024 020102                           cmp r1,r2                ; check if we're overrunning the end of the scroll region?
    1854 007026 101403                           blos 20$                 ; yes, skip the move
    1855                                10$:
    1856 007030 014140                           mov -(r1),-(r0)          ; move
    1857 007032 020102                           cmp r1,r2                ; should end move at the start of line below tmarg
    1858 007034 101375                           bhi 10$                  ; repeat
    1859                                20$:
    1860 007036 005300                           dec r0                   ; skip data byte
    1861 007040 005300                           dec r0                   ; skip attribute byte
    1862 007042 112710  000040                   movb #40,(r0)            ; clear the newly scrolled-in line - roll spaces over it; but leave attributes intact as per spec?
    1863 007046 020002                           cmp r0,r2                ; check for end
    1864 007050 101372                           bhi 20$                  ; repeat
    1865 007052 012767  000001  171300           mov #colmin,curc         ; set cursor to first column
    1866                                90$:
    1867 007060 012602                           mov (r6)+,r2             ; pop r2
    1868 007062 000207                           rts pc
    1869                                ;
    1870                                ; -------------------------------------------------------------------
    1871                                ;
    1872                                ; CSI M - DL Delete Line (VT102)
    1873                                ;
    1874                                csium:
    1875 007064 010246                           mov r2,-(r6)             ; push r2
    1876 007066 026767  171262  171304           cmp curr,wsize           ; check if we are in the current scroll area
    1877 007074 101046                           bhi 90$                  ; no, done here - DL is not effective outside the scroll area
    1878 007076 016700  171272                   mov tmarg,r0             ; get top margin
    1879 007102 066700  171246                   add curr,r0              ; add current row
    1880 007106 005300                           dec r0                   ; correct for 1 bias
    1881 007110 005300                           dec r0                   ; correct for double 1 bias
    1882 007112 010001                           mov r0,r1                ; copy to r1
    1883 007114 066701  171460                   add parm1,r1             ; add number of lines to delete
    1884 007120 016702  171254                   mov wsize,r2             ; compute max number of lines to delete
    1885 007124 166702  171224                   sub curr,r2              ; wsize-curr
    1886 007130 020201                           cmp r2,r1                ; check for illegal value
    1887 007132 103001                           bhis 10$                 ; ok, no need to correct
    1888 007134 010201                           mov r2,r1                ; correct
    1889                                10$:
    1890 007136 006301                           asl r1                   ; word index
    1891 007140 006300                           asl r0                   ; word index
    1892 007142 016101  016556                   mov ltab(r1),r1          ; get address of source
    1893 007146 016000  016556                   mov ltab(r0),r0          ; get address of target
    1894                                
    1895 007152 016702  171220                   mov bmarg,r2             ; get bottom margin
    1896 007156 006302                           asl r2                   ; make word index
    1897 007160 016202  016556                   mov ltab(r2),r2          ; get ending address
    1898                                20$:
    1899 007164 012120                           mov (r1)+,(r0)+          ; move
    1900 007166 020102                           cmp r1,r2                ; check for end
    1901 007170 103775                           blo 20$                  ; branch if not yet at end
    1902                                30$:
    1903 007172 112720  000040                   movb #40,(r0)+           ; clear the newly scrolled-in line - roll spaces over it, but leave attributes in place
    1904 007176 005200                           inc r0                   ; skip attribute
    1905 007200 020002                           cmp r0,r2                ; check for end
    1906 007202 103773                           blo 30$                  ; branch if not yet at end
    1907 007204 012767  000001  171146           mov #colmin,curc         ; set cursor to first column
    1908                                90$:
    1909 007212 012602                           mov (r6)+,r2             ; pop r2
    1910 007214 000207                           rts pc
    1911                                ;
    1912                                ; -------------------------------------------------------------------
    1913                                ;
    1914                                ; CSI P - DCH Delete Character (VT102)
    1915                                ;
    1916                                csiup:
    1917 007216 010246                           mov r2,-(r6)             ; push r2
    1918 007220 016702  171130                   mov curr,r2              ; find current row
    1919 007224 006302                           asl r2                   ; make into word index - no debiasing, because we need the start of the next line
    1920 007226 016202  016556                   mov ltab(r2),r2          ; load the address from the table
    1921 007232 004767  001614                   jsr pc,fba               ; retrieve current cursor address in r0
    1922 007236 010001                           mov r0,r1                ; copy
    1923 007240 066701  171334                   add parm1,r1             ; add number of to be deleted chars
    1924 007244 066701  171330                   add parm1,r1             ; twice, because we need a word offset
    1925 007250 020102                           cmp r1,r2                ; check we're not going to the next line
    1926 007252 103402                           blo 10$                  ; no, branch if we're ok
    1927 007254 010201                           mov r2,r1                ; yes, set start address of next line as max
    1928 007256 000403                           br 20$                   ; and skip moving
    1929                                10$:
    1930 007260 012120                           mov (r1)+,(r0)+          ; move the chars towards the cursor pos
    1931 007262 020102                           cmp r1,r2                ; check if we're there yet
    1932 007264 103775                           blo 10$                  ; no, another
    1933                                20$:
    1934 007266 012720  000040                   mov #40,(r0)+            ; clear new chars - and attributes too
    1935 007272 020002                           cmp r0,r2                ; check if we're there yet
    1936 007274 103774                           blo 20$
    1937 007276 012602                           mov (r6)+,r2             ; pop r2
    1938 007300 000207                           rts pc
    1939                                ;
    1940                                ; -------------------------------------------------------------------
    1941                                ;
    1942                                ; CSI X - ECH Erase Character (VT200)
    1943                                ;
    1944                                csiux:
    1945 007302 010246                           mov r2,-(r6)             ; push r2
    1946 007304 016702  171044                   mov curr,r2              ; find current row
    1947 007310 006302                           asl r2                   ; make into word index - no debiasing, because we need the start of the next line
    1948 007312 016202  016556                   mov ltab(r2),r2          ; load the address from the table
    1949 007316 004767  001530                   jsr pc,fba               ; retrieve current cursor address in r0
    1950 007322 010001                           mov r0,r1                ; copy
    1951 007324 066701  171250                   add parm1,r1             ; add number of to be deleted chars
    1952 007330 066701  171244                   add parm1,r1             ; twice, because we need a word offset
    1953 007334 020102                           cmp r1,r2                ; check we're not going to the next line
    1954 007336 103401                           blo 10$                  ; no, branch if we're ok
    1955 007340 010201                           mov r2,r1                ; yes, set start address of next line as max
    1956                                10$:
    1957 007342 012720  000040                   mov #40,(r0)+            ; clear the chars
    1958 007346 020001                           cmp r0,r1                ; check if we're there yet
    1959 007350 103774                           blo 10$                  ; no, another
    1960                                20$:
    1961 007352 012602                           mov (r6)+,r2             ; pop r2
    1962 007354 000207                           rts pc
    1963                                ;
    1964                                ; -------------------------------------------------------------------
    1965                                ;
    1966                                ; CSI c - DA Device Attributes
    1967                                ;
    1968                                csilc:
    1969 007356 012701  007400                   mov #csilcs,r1           ; set up start of string
    1970                                10$:
    1971 007362 112100                           movb (r1)+,r0            ; pick up byte
    1972 007364 004767  005422                   jsr pc,xmit              ; xmit it
    1973 007370 020127  007407                   cmp r1,#csilce
    1974 007374 001372                           bne 10$
    1975 007376 000207                           rts pc
    1976                                csilcs:
    1977 007400    033     133     077           .byte 33,133,77,61,73,66,143                 ; this says that we're a vt10x, with a bitmask in the char before the c - 4:graphic waveform generator (yes) 2:advanced video (yes) 1:processor option (no).
         007403    061     073     066  
         007406    143                  
    1978                                csilce:
    1979 007407    000                           .even
    1980                                ;
    1981                                ; -------------------------------------------------------------------
    1982                                ;
    1983                                ; CSI f - HVP Horizontal and Vertical Position
    1984                                ;
    1985                                csilf:
    1986 007410 004767  177004                   jsr pc,csiuh             ; csi lower case f is the same as csi upper case h
    1987 007414 000207                           rts pc
    1988                                ;
    1989                                ; -------------------------------------------------------------------
    1990                                ;
    1991                                ; CSI g - TBC Tabulation Clear
    1992                                ;
    1993                                csilg:
    1994 007416 022767  000000  171132           cmp #0,parmt             ; 0? where 0 means clear tab at current pos
    1995 007424 001006                           bne 10$                  ; no, something else
    1996 007426 016700  170726                   mov curc,r0              ; pickup current column
    1997 007432 005300                           dec r0                   ; adjust
    1998 007434 105060  000402                   clrb tabtab(r0)          ; clear tab
    1999 007440 000414                           br 90$
    2000                                10$:
    2001 007442 022767  000003  171106           cmp #3,parmt             ; clear all tabs?
    2002 007450 001010                           bne 90$                  ; no, skip
    2003 007452 012700  000120                   mov #colmax,r0           ; load max col
    2004 007456 005300                           dec r0                   ; adjust
    2005                                20$:
    2006 007460 105060  000402                   clrb tabtab(r0)          ; clear this tab
    2007 007464 005300                           dec r0                   ; move one down
    2008 007466 005700                           tst r0
    2009 007470 001373                           bne 20$                  ; done?
    2010                                90$:
    2011 007472 000207                           rts pc
    2012                                ;
    2013                                ; -------------------------------------------------------------------
    2014                                ;
    2015                                ; CSI h - Set mode
    2016                                ;
    2017                                csilh:
    2018 007474 005000                           clr r0
    2019                                5$:
    2020 007476 020067  171052                   cmp r0,parmc             ; pick up parm count, well, offset
    2021 007502 101072                           bhi 95$                  ; that far? then done
    2022 007504 016001  000556                   mov parmt(r0),r1         ; load the value
    2023 007510 022701  000024                   cmp #20.,r1              ; line feed/new line
    2024 007514 001004                           bne 10$
    2025 007516 112767  000001  171020           movb #1,anslnm           ; set
    2026 007524 000456                           br 90$
    2027                                10$:
    2028 007526 022701  000001                   cmp #1,r1                ; cursor key mode
    2029 007532 001004                           bne 20$
    2030 007534 112767  000001  171005           movb #1,decckm
    2031 007542 000447                           br 90$
    2032                                20$:
    2033 007544 022701  000003                   cmp #3,r1                ; deccolm - 80/132. We don't do 132, but... switching clears the screen, and we should definitely do that.
    2034 007550 001006                           bne 30$
    2035 007552 112767  000001  170771           movb #1,deccolm
    2036 007560 004767  175546                   jsr pc,clrscr            ; clear screen
    2037 007564 000436                           br 90$
    2038                                30$:
    2039 007566 022701  000004                   cmp #4,r1
    2040 007572 001004                           bne 40$
    2041 007574 112767  000001  170743           movb #1,ansins           ; IRM ie ansi insert mode
    2042 007602 000427                           br 90$
    2043                                40$:
    2044 007604 022701  000006                   cmp #6,r1                ; origin mode
    2045 007610 001006                           bne 50$
    2046 007612 112767  000001  170732           movb #1,decom
    2047 007620 105067  170540                   clrb lcf
    2048 007624 000416                           br 90$
    2049                                50$:
    2050 007626 022701  000007                   cmp #7,r1                ; wraparound
    2051 007632 001004                           bne 60$
    2052 007634 112767  000001  170704           movb #1,decawm
    2053 007642 000407                           br 90$
    2054                                60$:
    2055 007644 022701  000031                   cmp #25.,r1              ; DECTCEM
    2056 007650 001004                           bne 70$
    2057 007652 042737  000200  140002           bic #200,@#vgacr         ; set DECTCTEM mode clears the hide cursor bit
    2058 007660 000400                           br 90$
    2059                                70$:
    2060                                90$:
    2061 007662 005200                           inc r0                   ; inc parm index
    2062 007664 005200                           inc r0                   ; twice, it's a word
    2063 007666 000703                           br 5$                   ; go for the next round
    2064                                95$:
    2065 007670 000207                           rts pc
    2066                                ;
    2067                                ; -------------------------------------------------------------------
    2068                                ;
    2069                                ; CSI l - Reset mode
    2070                                ;
    2071                                csill:
    2072 007672 005000                           clr r0
    2073                                5$:
    2074 007674 020067  170654                   cmp r0,parmc             ; pick up parm count, well, offset
    2075 007700 101101                           bhi 95$                  ; that far? then done
    2076 007702 016001  000556                   mov parmt(r0),r1         ; load the value
    2077                                ;
    2078 007706 022701  000002                   cmp #2,r1                ; DECANM - ANSI/VT52 mode - special case for Reset Mode only
    2079 007712 001004                           bne 7$
    2080 007714 112767  000001  170607           movb #1,vt52             ; set vt52 mode. There is no corresponding set mode for this - vt52 would not know that; instead that is done by esc3c
    2081 007722 000465                           br 90$
    2082                                7$:
    2083 007724 022701  000024                   cmp #20.,r1              ; ANSI line feed/new line
    2084 007730 001004                           bne 10$
    2085 007732 112767  000000  170604           movb #0,anslnm
    2086 007740 000456                           br 90$
    2087                                10$:
    2088 007742 022701  000001                   cmp #1,r1                ; cursor key mode
    2089 007746 001004                           bne 20$
    2090 007750 112767  000000  170571           movb #0,decckm
    2091 007756 000447                           br 90$
    2092                                20$:
    2093 007760 022701  000003                   cmp #3,r1                ; deccolm - 80/132. We don't do 132, but... switching clears the screen, and we should definitely do that.
    2094 007764 001006                           bne 30$
    2095 007766 112767  000000  170555           movb #0,deccolm
    2096 007774 004767  175332                   jsr pc,clrscr            ; clear screen
    2097 010000 000436                           br 90$
    2098                                30$:
    2099 010002 022701  000004                   cmp #4,r1
    2100 010006 001004                           bne 40$
    2101 010010 112767  000000  170527           movb #0,ansins           ; IRM ie ANSI insert mode
    2102 010016 000427                           br 90$
    2103                                40$:
    2104 010020 022701  000006                   cmp #6,r1                ; origin mode
    2105 010024 001006                           bne 50$
    2106 010026 112767  000000  170516           movb #0,decom
    2107 010034 105067  170324                   clrb lcf
    2108 010040 000416                           br 90$
    2109                                50$:
    2110 010042 022701  000007                   cmp #7,r1                ; wraparound
    2111 010046 001004                           bne 60$
    2112 010050 112767  000000  170470           movb #0,decawm
    2113 010056 000407                           br 90$
    2114                                60$:
    2115 010060 022701  000031                   cmp #25.,r1              ; DECTCEM
    2116 010064 001004                           bne 70$
    2117 010066 052737  000200  140002           bis #200,@#vgacr         ; reset DECTCTEM mode sets the hide cursor bit
    2118 010074 000400                           br 90$
    2119                                70$:
    2120                                90$:
    2121 010076 005200                           inc r0                   ; inc parm index
    2122 010100 005200                           inc r0                   ; twice, it's a word
    2123 010102 000674                           br 5$                   ; go for the next round
    2124                                95$:
    2125 010104 000207                           rts pc
    2126                                ;
    2127                                ; -------------------------------------------------------------------
    2128                                ;
    2129                                ; CSI m - SGR Select Graphic Rendition
    2130                                ;
    2131                                csilm:
    2132 010106 005000                           clr r0
    2133                                10$:
    2134 010110 020067  170440                   cmp r0,parmc             ; pick up parm count, well, offset
    2135 010114 101103                           bhi 90$                  ; that far? then done
    2136 010116 016001  000556                   mov parmt(r0),r1         ; load the value
    2137 010122 022701  000000                   cmp #0,r1                ; 0 - clear attr
    2138 010126 001003                           bne 20$                  ;
    2139 010130 105067  170232                   clrb atth                ; clear
    2140 010134 000470                           br 70$
    2141                                20$:
    2142 010136 022701  000001                   cmp #1,r1                ; 1, bold
    2143 010142 001004                           bne 21$
    2144 010144 152767  000001  170214           bisb #1,atth             ; bit 0 is bold
    2145 010152 000461                           br 70$
    2146                                21$:
    2147 010154 022701  000004                   cmp #4,r1                ; 4, underscore
    2148 010160 001004                           bne 22$
    2149 010162 152767  000002  170176           bisb #2,atth             ; bit 1 is underscore
    2150 010170 000452                           br 70$
    2151                                22$:
    2152 010172 022701  000005                   cmp #5,r1                ; 5, blink
    2153 010176 001004                           bne 23$
    2154 010200 152767  000004  170160           bisb #4,atth             ; bit 2 is blink
    2155 010206 000443                           br 70$
    2156                                23$:
    2157 010210 022701  000007                   cmp #7,r1                ; 7, reverse video
    2158 010214 001004                           bne 24$
    2159 010216 152767  000010  170142           bisb #10,atth            ; bit 3 is rv
    2160 010224 000434                           br 70$
    2161                                24$:
    2162                                30$:
    2163 010226 022701  000026                   cmp #22.,r1              ; 22 *decimal, not bold
    2164 010232 001004                           bne 31$
    2165 010234 142767  000001  170124           bicb #1,atth             ; bit 0 is bold
    2166 010242 000425                           br 70$
    2167                                31$:
    2168 010244 022701  000030                   cmp #24.,r1              ; 24 *decimal, not underscore
    2169 010250 001004                           bne 32$
    2170 010252 142767  000002  170106           bicb #2,atth             ; bit 1 is underscore
    2171 010260 000416                           br 70$
    2172                                32$:
    2173 010262 022701  000031                   cmp #25.,r1              ; 25 *decimal, not blink
    2174 010266 001004                           bne 33$
    2175 010270 142767  000004  170070           bicb #4,atth             ; bit 2 is blink
    2176 010276 000407                           br 70$
    2177                                33$:
    2178 010300 022701  000033                   cmp #27.,r1              ; 27 *decimal, not reverse
    2179 010304 001004                           bne 34$
    2180 010306 142767  000010  170052           bicb #10,atth            ; bit 3 is rv
    2181 010314 000400                           br 70$
    2182                                34$:
    2183                                70$:
    2184 010316 005200                           inc r0                   ; inc parm index
    2185 010320 005200                           inc r0                   ; twice, it's a word
    2186 010322 000672                           br 10$                   ; go for the next round
    2187                                90$:
    2188 010324 000207                           rts pc
    2189                                ;
    2190                                ; -------------------------------------------------------------------
    2191                                ;
    2192                                ; CSI n - DSR Device Status Report
    2193                                ;
    2194                                csiln:
    2195 010326 022767  000005  170222           cmp #5,parmt             ; report terminal status
    2196 010334 001405                           beq 10$
    2197 010336 022767  000006  170212           cmp #6,parmt             ; report cursor position
    2198 010344 001422                           beq 20$
    2199 010346 000507                           br 90$
    2200                                10$:
    2201 010350 012700  000033                   mov #33,r0               ; esc
    2202 010354 004767  004432                   jsr pc,xmit
    2203 010360 012700  000133                   mov #133,r0              ; [
    2204 010364 004767  004422                   jsr pc,xmit
    2205 010370 012700  000060                   mov #60,r0               ; 0 - means all ok
    2206 010374 004767  004412                   jsr pc,xmit
    2207 010400 012700  000156                   mov #156,r0              ; n
    2208 010404 004767  004402                   jsr pc,xmit
    2209 010410 000466                           br 90$
    2210                                20$:
    2211 010412 012700  000033                   mov #33,r0               ; esc
    2212 010416 004767  004370                   jsr pc,xmit
    2213 010422 012700  000133                   mov #133,r0              ; [
    2214 010426 004767  004360                   jsr pc,xmit
    2215                                ;
    2216                                ; calculate row decimal position
    2217                                ;
    2218 010432 016701  167716                   mov curr,r1              ; get row
    2219 010436 005000                           clr r0                   ; keep loop counter in r0
    2220 010440 005300                           dec r0                   ; start at -1
    2221                                30$:
    2222 010442 005200                           inc r0                   ; increment loop counter
    2223 010444 162701  000012                   sub #10.,r1              ; subtract 10 decimal
    2224 010450 100374                           bpl 30$                  ; another loop?
    2225 010452 062701  000072                   add #72,r1               ; add 10 decimal to correct the last subtraction, plus 60 octal to make a char in the range 0-9
    2226 010456 005700                           tst r0                   ; loop counter zero?
    2227 010460 001404                           beq 40$                  ; yes, then skip leading zero
    2228 010462 062700  000060                   add #60,r0               ; make char in range 0-9
    2229 010466 004767  004320                   jsr pc,xmit              ; transmit
    2230                                40$:
    2231 010472 010100                           mov r1,r0                ; move calculated char into r0
    2232 010474 004767  004312                   jsr pc,xmit              ; transmit
    2233 010500 012700  000073                   mov #73,r0               ; ;
    2234 010504 004767  004302                   jsr pc,xmit
    2235                                ;
    2236                                ; now the col
    2237                                ;
    2238 010510 016701  167644                   mov curc,r1              ; get column
    2239 010514 005000                           clr r0                   ; keep loop counter in r0
    2240 010516 005300                           dec r0                   ; start at -1
    2241                                50$:
    2242 010520 005200                           inc r0                   ; inc loopcounter
    2243 010522 162701  000012                   sub #10.,r1              ; loop while subtracting 10 decimal
    2244 010526 100374                           bpl 50$                  ; need another go?
    2245 010530 062701  000072                   add #72,r1               ; add 10 decimal to correct the last subtraction, plus 60 octal to make a char in the range 0-9
    2246 010534 005700                           tst r0                   ; check loop counter for zero
    2247 010536 001404                           beq 60$                  ; if it is, it doesn't need printing - some software doesnt't handle leading zeros
    2248 010540 062700  000060                   add #60,r0               ; offset 10-unit by octal 60 to make char in the range 0-9
    2249 010544 004767  004242                   jsr pc,xmit              ; xmit 10-unit
    2250                                60$:
    2251 010550 010100                           mov r1,r0                ; move last digit char into r0
    2252 010552 004767  004234                   jsr pc,xmit              ; xmit
    2253 010556 012700  000122                   mov #122,r0              ; R
    2254 010562 004767  004224                   jsr pc,xmit
    2255                                90$:
    2256 010566 000207                           rts pc
    2257                                ;
    2258                                ; -------------------------------------------------------------------
    2259                                ;
    2260                                ; CSI r - DECSTBM - Set Top and Bottom Margins
    2261                                ;
    2262                                csilr:
    2263 010570 016700  167762                   mov parmt,r0             ; pickup first parm
    2264 010574 005700                           tst r0
    2265 010576 001417                           beq 80$
    2266 010600 016701  167754                   mov parmt+2,r1           ; pickup second parm
    2267 010604 005701                           tst r1
    2268 010606 001413                           beq 80$
    2269 010610 020001                           cmp r0,r1                ; check: top can not be greater or equal than bottom; viewport must have at least two lines
    2270 010612 103011                           bhis 80$                 ; if not, set defaults. or maybe ignore instead? FIXME
    2271 010614 010067  167554                   mov r0,tmarg             ; store top
    2272 010620 010167  167552                   mov r1,bmarg             ; store bottom
    2273 010624 160001                           sub r0,r1                ; r1=bmarg-tmarg
    2274 010626 005201                           inc r1                   ; adjust to get scroll window size
    2275 010630 010167  167544                   mov r1,wsize             ; store
    2276 010634 000411                           br 90$
    2277                                80$:
    2278 010636 012767  000001  167530           mov #dtmarg,tmarg        ; restore default
    2279 010644 012767  000030  167524           mov #dbmarg,bmarg        ; restore default
    2280 010652 012767  000030  167520           mov #dwsize,wsize        ; restore default
    2281                                90$:
    2282 010660 012700  000001                   mov #1,r0                ; load home coordinate
    2283 010664 010067  167464                   mov r0,curr              ; set cursor to home row in new viewport
    2284 010670 010067  167464                   mov r0,curc              ; set cursor to home col in new viewport
    2285 010674 004767  000152                   jsr pc,fba               ; normalize
    2286 010700 105067  167460                   clrb lcf
    2287 010704 000207                           rts pc
    2288                                ;
    2289                                ; -------------------------------------------------------------------
    2290                                ;
    2291                                ; CSI x - DECREQTPARM - Request Terminal Parameters
    2292                                ;
    2293                                csilx:
    2294 010706 022767  000000  167642           cmp #0,parmt             ; 0 - report and allow unsolicited
    2295 010714 001011                           bne 20$
    2296 010716 012701  011020                   mov #csilx0,r1
    2297                                10$:
    2298 010722 112100                           movb (r1)+,r0
    2299 010724 004767  004062                   jsr pc,xmit
    2300 010730 020127  011044                   cmp r1,#csilx1
    2301 010734 001372                           bne 10$
    2302 010736 000415                           br 90$
    2303                                20$:
    2304 010740 022767  000001  167610           cmp #1,parmt             ; 1 - report and don't allow unsolicited
    2305 010746 001011                           bne 90$
    2306 010750 012701  010774                   mov #csilxs,r1
    2307                                30$:
    2308 010754 112100                           movb (r1)+,r0
    2309 010756 004767  004030                   jsr pc,xmit
    2310 010762 020127  011020                   cmp r1,#csilxe
    2311 010766 001372                           bne 30$
    2312 010770 000400                           br 90$
    2313                                90$:
    2314 010772 000207                           rts pc
    2315                                csilxs:
    2316 010774    033     133                   .byte 33,133             ; csi
    2317 010776    063                           .ascii /3/               ; this message is a report and the terminal is only reporting on request
    2318 010777    073                           .ascii /;/               ; separator
    2319 011000    061                           .ascii /1/               ; no parity
    2320 011001    073                           .ascii /;/               ; separator
    2321 011002    061                           .ascii /1/               ; 8 bits per character
    2322 011003    073                           .ascii /;/               ; separator
    2323 011004    061     061     062           .ascii /112/             ; xspeed 9600
    2324 011007    073                           .ascii /;/               ; separator
    2325 011010    061     061     062           .ascii /112/             ; rspeed 9600
    2326 011013    073                           .ascii /;/               ; separator
    2327 011014    061                           .ascii /1/               ; multiplier
    2328 011015    073                           .ascii /;/               ; separator
    2329 011016    060                           .ascii /0/               ; flags
    2330 011017    170                           .ascii /x/               ; end
    2331                                csilxe:
    2332                                csilx0:
    2333 011020    033     133                   .byte 33,133             ; csi
    2334 011022    062                           .ascii /2/               ; this message is a report and the terminal will send unsolicited (except we won't, there's no logic for it)
    2335 011023    073                           .ascii /;/               ; separator
    2336 011024    061                           .ascii /1/               ; no parity
    2337 011025    073                           .ascii /;/               ; separator
    2338 011026    061                           .ascii /1/               ; 8 bits per character
    2339 011027    073                           .ascii /;/               ; separator
    2340 011030    061     061     062           .ascii /112/             ; xspeed 9600
    2341 011033    073                           .ascii /;/               ; separator
    2342 011034    061     061     062           .ascii /112/             ; rspeed 9600
    2343 011037    073                           .ascii /;/               ; separator
    2344 011040    061                           .ascii /1/               ; multiplier
    2345 011041    073                           .ascii /;/               ; separator
    2346 011042    060                           .ascii /0/               ; flags
    2347 011043    170                           .ascii /x/               ; end
    2348                                csilx1:
    2349                                         .even
    2350                                ;
    2351                                ; -------------------------------------------------------------------
    2352                                ;
    2353                                ; CSI y - DECTST - Invoke Confidence Test
    2354                                ;
    2355                                csily:
    2356 011044 000167  167730                   jmp t42
    2357                                ;
    2358                                ; -------------------------------------------------------------------
    2359                                ;
    2360                                ; csinul - dummy
    2361                                ;
    2362                                csinul:
    2363 011050 000207                           rts pc
    2364                                ;
    2365                                ; -------------------------------------------------------------------
    2366                                ;
    2367                                ; fba - find buffer address
    2368                                ;
    2369                                ; cursor coordinates will be normalized, returns buffer address in r0
    2370                                ; note that before coming here, signed arithmetic might have been done
    2371                                ; on curr, curc and wsize, so this routine must use the signed branches.
    2372                                ;
    2373                                fba:
    2374 011052 010146                           mov r1,-(r6)             ; push r1
    2375 011054 026727  167300  000001           cmp curc,#colmin         ; not lower than min?
    2376 011062 002003                           bge 10$
    2377 011064 012767  000001  167266           mov #colmin,curc         ; set min value
    2378                                10$:
    2379 011072 026727  167262  000120           cmp curc,#colmax         ; not larger than max?
    2380 011100 003403                           ble 20$
    2381 011102 012767  000120  167250           mov #colmax,curc         ; set max value
    2382                                20$:
    2383 011110 016700  167240                   mov curr,r0
    2384 011114 020027  000001                   cmp r0,#rowmin           ; not lower than min?
    2385 011120 002004                           bge 30$
    2386 011122 012767  000001  167224           mov #rowmin,curr         ; set min
    2387 011130 000767                           br 20$                   ; go back
    2388                                30$:
    2389 011132 020027  000030                   cmp r0,#rowmax           ; not larger than max?
    2390 011136 003404                           ble 40$
    2391 011140 012767  000030  167206           mov #rowmax,curr         ; set max
    2392 011146 000760                           br 20$                   ; go back
    2393                                40$:
    2394 011150 105767  167376                   tstb decom               ; is origin mode on?
    2395 011154 001412                           beq 60$                  ; no
    2396 011156 020067  167216                   cmp r0,wsize             ; check row against window size
    2397 011162 003404                           ble 50$
    2398 011164 016700  167210                   mov wsize,r0             ; set min
    2399 011170 010067  167160                   mov r0,curr              ; normalize curr
    2400                                50$:
    2401 011174 066700  167174                   add tmarg,r0             ; add top margin to row offset
    2402 011200 005300                           dec r0                   ; correct for offset
    2403                                60$:
    2404 011202 005300                           dec r0                   ; correct for offset
    2405 011204 006300                           asl r0                   ; make word index
    2406 011206 016000  016556                   mov ltab(r0),r0          ; load address from table
    2407 011212 016701  167142                   mov curc,r1              ; get column
    2408 011216 005301                           dec r1                   ; correct
    2409 011220 006301                           asl r1                   ; make word address
    2410 011222 060100                           add r1,r0                ; add column to address
    2411 011224 012601                           mov (r6)+,r1             ; pop r1
    2412 011226 000207                           rts pc
    2413                                ;
    2414                                ; -------------------------------------------------------------------
    2415                                ;
    2416                                ; scrl - scroll up one line
    2417                                ;
    2418                                scrl:
    2419 011230 010246                           mov r2,-(r6)             ; push r2
    2420 011232 010146                           mov r1,-(r6)             ; push r1
    2421 011234 010046                           mov r0,-(r6)             ; push r0
    2422 011236 016701  167132                   mov tmarg,r1             ; get top margin
    2423 011242 010100                           mov r1,r0                ; copy
    2424 011244 005300                           dec r0                   ; minus one - r0 is now top row - 1, r1 is now row.
    2425 011246 006301                           asl r1                   ; make word index
    2426 011250 006300                           asl r0                   ; make word index
    2427 011252 016101  016556                   mov ltab(r1),r1          ; get address of from position for scroll
    2428 011256 016000  016556                   mov ltab(r0),r0          ; get address of to position for scroll
    2429 011262 016702  167110                   mov bmarg,r2             ; get bottom margin
    2430 011266 006302                           asl r2                   ; make word index
    2431 011270 016202  016556                   mov ltab(r2),r2          ; get ending address
    2432                                10$:
    2433 011274 012120                           mov (r1)+,(r0)+          ; move
    2434 011276 020102                           cmp r1,r2                ; check for end
    2435 011300 103775                           blo 10$                  ; not yet
    2436                                20$:
    2437 011302 012720  000040                   mov #40,(r0)+            ; clear the newly scrolled-in line - roll spaces over it
    2438 011306 020002                           cmp r0,r2                ; check for end
    2439 011310 103774                           blo 20$
    2440                                ;
    2441 011312 016701  167056                   mov tmarg,r1             ; get top margin
    2442 011316 010100                           mov r1,r0                ; copy
    2443 011320 005300                           dec r0                   ; minus one - r0 is now top row - 1, r1 is now row.
    2444 011322 062701  140040                   add #vgadwh,r1           ; get address of from position for scroll
    2445 011326 062700  140040                   add #vgadwh,r0           ; get address of to position for scroll
    2446 011332 016702  167040                   mov bmarg,r2             ; get bottom margin
    2447 011336 062702  140040                   add #vgadwh,r2           ; get ending address
    2448                                30$:
    2449 011342 112120                           movb (r1)+,(r0)+         ; move line attributes
    2450 011344 020102                           cmp r1,r2                ; check for end
    2451 011346 103775                           blo 30$                  ; not yet
    2452 011350 105010                           clrb (r0)                ; clear line attributes for new line
    2453                                ;
    2454 011352 012600                           mov (r6)+,r0             ; pop r0
    2455 011354 012601                           mov (r6)+,r1             ; pop r1
    2456 011356 012602                           mov (r6)+,r2             ; pop r2
    2457 011360 000207                           rts pc
    2458                                ;
    2459                                ; -------------------------------------------------------------------
    2460                                ;
    2461                                ; rscrl - scroll down one line
    2462                                ;
    2463                                rscrl:
    2464 011362 010246                           mov r2,-(r6)             ; push r2
    2465 011364 010146                           mov r1,-(r6)             ; push r1
    2466 011366 010046                           mov r0,-(r6)             ; push r0
    2467 011370 016701  167002                   mov bmarg,r1             ; get bottom margin
    2468 011374 010100                           mov r1,r0                ; copy
    2469 011376 005301                           dec r1                   ; one less; r1 is now bottom -1, r0 is bottom
    2470 011400 006301                           asl r1                   ; word index
    2471 011402 006300                           asl r0                   ; word index
    2472 011404 016101  016556                   mov ltab(r1),r1          ; get address of where from
    2473 011410 016000  016556                   mov ltab(r0),r0          ; get address of where to
    2474 011414 016702  166754                   mov tmarg,r2             ; get top margin
    2475 011420 005302                           dec r2                   ; correct
    2476 011422 006302                           asl r2                   ; make word index
    2477 011424 016202  016556                   mov ltab(r2),r2          ; get ending address
    2478                                10$:
    2479 011430 014140                           mov -(r1),-(r0)          ; move
    2480 011432 020102                           cmp r1,r2                ; should end move at the start of line below tmarg
    2481 011434 101375                           bhi 10$
    2482                                20$:
    2483 011436 012740  000040                   mov #40,-(r0)            ; clear the newly scrolled-in line - roll spaces over it
    2484 011442 020002                           cmp r0,r2                ; check for end
    2485 011444 101374                           bhi 20$
    2486                                ;
    2487 011446 016701  166724                   mov bmarg,r1             ; get bottom margin
    2488 011452 010100                           mov r1,r0                ; copy
    2489 011454 005301                           dec r1                   ; one less; r1 is now bottom -1, r0 is bottom
    2490 011456 062701  140040                   add #vgadwh,r1           ; get address of where from
    2491 011462 062700  140040                   add #vgadwh,r0           ; get address of where to
    2492 011466 016702  166702                   mov tmarg,r2             ; get top margin
    2493 011472 005302                           dec r2                   ; correct
    2494 011474 062702  140040                   add #vgadwh,r2           ; get ending address
    2495                                30$:
    2496 011500 114140                           movb -(r1),-(r0)         ; move
    2497 011502 020102                           cmp r1,r2                ; end move at the line below tmarg
    2498 011504 101375                           bhi 30$
    2499 011506 105040                           clrb -(r0)               ; clear the line attributes for the newly scrolled in line
    2500                                ;
    2501 011510 012600                           mov (r6)+,r0             ; pop r0
    2502 011512 012601                           mov (r6)+,r1             ; pop r1
    2503 011514 012602                           mov (r6)+,r2             ; pop r2
    2504 011516 000207                           rts pc
    2505                                ;
    2506                                ; -------------------------------------------------------------------
    2507                                ;
    2508                                ; dolcf
    2509                                ;
    2510                                dolcf:
    2511 011520 105767  166640                   tstb lcf                 ; is the flag on?
    2512 011524 001427                           beq 90$                  ; no, out of here
    2513 011526 105767  166777                   tstb vt52                ; check for vt52 mode
    2514 011532 001024                           bne 90$                  ; vt52 mode - no lcf processing
    2515 011534 026727  166620  000120           cmp curc,#colmax         ; check to be sure that we're in the last col
    2516 011542 001020                           bne 90$                  ; no, out of here
    2517                                ;
    2518 011544 026767  166604  166624           cmp curr,bmarg           ; so we need the next line. Are we on the last?
    2519 011552 103007                           bhis 60$                 ; yes, need to scroll
    2520 011554 012767  000001  166576           mov #colmin,curc         ; first pos on
    2521 011562 062767  000001  166564           add #1,curr              ; next line
    2522 011570 000405                           br 90$
    2523                                60$:
    2524 011572 004767  177432                   jsr pc,scrl              ; do the scroll
    2525 011576 012767  000001  166554           mov #colmin,curc         ; set the cursor back in column 1
    2526                                90$:
    2527 011604 105067  166554                   clrb lcf                 ; clear the lcf flag
    2528 011610 004767  177236                   jsr pc,fba               ; update cursor address
    2529 011614 000207                           rts pc
    2530                                ;
    2531                                ; -------------------------------------------------------------------
    2532                                ;
    2533                                ; gprint
    2534                                ;
    2535                                gprint:
    2536 011616 004767  177676                   jsr pc,dolcf             ; normalize addresses and pickup r0
    2537 011622 126727  166544  000060           cmpb chrset,#chrgra      ; graphics set current?
    2538 011630 001011                           bne 3$                   ; nope
    2539 011632 020127  000137                   cmp r1,#137              ; in graphics range?
    2540 011636 103406                           blo 3$                   ; before low bound
    2541 011640 020127  000177                   cmp r1,#177              ; del?
    2542 011644 001403                           beq 3$
    2543 011646 162701  000137                   sub #137,r1               ; shift by 137 into fontrom
    2544 011652 000412                           br 5$
    2545                                3$:
    2546 011654 126727  166512  000101           cmpb chrset,#chruk       ; uk set?
    2547 011662 001006                           bne 4$                   ; nope
    2548 011664 020127  000044                   cmp r1,#44               ; $?
    2549 011670 001003                           bne 4$
    2550 011672 012701  000036                   mov #36,r1               ; set code for pound symbol
    2551 011676 000400                           br 5$
    2552                                4$:
    2553                                5$:
    2554 011700 105767  166641                   tstb ansins              ; check if we're in insert mode?
    2555 011704 001424                           beq 9$                   ; no
    2556 011706 010046                           mov r0,-(r6)             ; push r0
    2557 011710 010146                           mov r1,-(r6)             ; push r1
    2558 011712 010246                           mov r2,-(r6)             ; push r2
    2559 011714 010002                           mov r0,r2                ; copy cursor address
    2560 011716 016700  166432                   mov curr,r0              ; load curr
    2561 011722 006300                           asl r0                   ; word index
    2562 011724 016000  016556                   mov ltab(r0),r0          ; get start address of next line
    2563 011730 010001                           mov r0,r1                ; copy
    2564 011732 005301                           dec r1                   ; two
    2565 011734 005301                           dec r1                   ; ... less
    2566 011736 020102                           cmp r1,r2                ; same? then we'd be on colmax
    2567 011740 001403                           beq 7$                   ; skip rest if so - no action if on last col
    2568                                6$:
    2569 011742 014140                           mov -(r1),-(r0)          ; do the move
    2570 011744 020102                           cmp r1,r2                ; compare addresses
    2571 011746 101375                           bhi 6$                   ; loop if r1>r2 still
    2572                                7$:
    2573 011750 012602                           mov (r6)+,r2             ; pop r2
    2574 011752 012601                           mov (r6)+,r1             ; pop r1
    2575 011754 012600                           mov (r6)+,r0             ; pop r0
    2576                                9$:
    2577 011756 110120                           movb r1,(r0)+            ; write the char
    2578 011760 116710  166402                   movb atth,(r0)           ; write the attribute bits
    2579 011764 005300                           dec r0                   ; set r0 back to where we were - not sure if that is necessary?
    2580                                ;
    2581 011766 026727  166366  000120           cmp curc,#colmax         ; space left on this line?
    2582 011774 001401                           beq 10$                  ; not quite
    2583 011776 103407                           blo 20$                  ; yes sure
    2584                                10$:
    2585 012000 105767  166542                   tstb decawm              ; check for decawm autowrap mode
    2586 012004 001410                           beq 90$                  ; if not on, no lcf processing - stay on this line
    2587 012006 112767  000001  166350           movb #1,lcf              ; set last column flag
    2588 012014 000404                           br 90$
    2589                                20$:
    2590 012016 062767  000001  166334           add #1,curc              ; next pos on same line
    2591 012024 000400                           br 90$
    2592                                90$:
    2593 012026 000207                           rts pc
    2594                                ;
    2595                                ; -------------------------------------------------------------------
    2596                                ;
    2597                                ; control character processing
    2598                                ;
    2599                                cntrl:
    2600 012030 020127  000040                   cmp r1,#40               ; control character?
    2601 012034 103010                           bhis 90$                 ; no, done here
    2602 012036 010100                           mov r1,r0                ; copy
    2603 012040 006300                           asl r0                   ; make word index
    2604 012042 016000  016256                   mov ctab(r0),r0          ; pick up address of routine
    2605 012046 005700                           tst r0                   ; zero?
    2606 012050 001402                           beq 90$                  ; yes, not handled
    2607 012052 004710                           jsr pc,(r0)              ; go there
    2608 012054 005001                           clr r1                   ; processing done
    2609                                90$:
    2610 012056 000207                           rts pc
    2611                                ;
    2612                                ; -------------------------------------------------------------------
    2613                                ;
    2614                                ; cnul - the nul control character
    2615                                ;
    2616                                cnul:
    2617 012060 000207                           rts pc
    2618                                ;
    2619                                ; -------------------------------------------------------------------
    2620                                ;
    2621                                ; cenq - enquire
    2622                                ;
    2623                                cenq:
    2624 012062 000207                           rts pc                   ; not sure I like the enq function very much. Oh well, it's here, it's tested, it's, ehh, disabled.
    2625                                
    2626 012064 022737  000151  140012           cmp #105.,@#vgavtt       ; check for vt type
    2627 012072 001411                           beq 20$                  ; 105 check, go there
    2628 012074 012701  012140                   mov #cenq0,r1            ; setup for string copy
    2629                                10$:
    2630 012100 112100                           movb (r1)+,r0            ; copy
    2631 012102 004767  002704                   jsr pc,xmit              ; xmit the character
    2632 012106 020127  012156                   cmp r1,#cenq1            ; at the end?
    2633 012112 001372                           bne 10$                  ; branch if not
    2634 012114 000207                           rts pc                   ; done here
    2635                                20$:
    2636 012116 012701  012156                   mov #cenq2,r1            ; setup for string copy, vt105 version
    2637                                30$:
    2638 012122 112100                           movb (r1)+,r0            ; get the char
    2639 012124 004767  002662                   jsr pc,xmit              ; xmit it
    2640 012130 020127  012174                   cmp r1,#cenq3            ; at the end of the string yet?
    2641 012134 001372                           bne 30$                  ; no not yet
    2642 012136 000207                           rts pc                   ; done here
    2643                                ;
    2644                                cenq0:
    2645 012140    166     164     061           .ascii /vt100[pdp2011]/
         012143    060     060     133  
         012146    160     144     160  
         012151    062     060     061  
         012154    061     135          
    2646                                cenq1:
    2647                                cenq2:
    2648 012156    166     164     061           .ascii /vt105[pdp2011]/
         012161    060     065     133  
         012164    160     144     160  
         012167    062     060     061  
         012172    061     135          
    2649                                cenq3:
    2650                                         .even
    2651                                ;
    2652                                ; -------------------------------------------------------------------
    2653                                ;
    2654                                ; cbs - backspace handler
    2655                                ;
    2656                                cbs:
    2657 012174 162767  000001  166156           sub #1,curc              ; backspace
    2658 012202 004767  176644                   jsr pc,fba               ; normalize
    2659 012206 105067  166152                   clrb lcf
    2660 012212 000207                           rts pc
    2661                                ;
    2662                                ; -------------------------------------------------------------------
    2663                                ;
    2664                                ; cht - tab handler
    2665                                ;
    2666                                cht:
    2667 012214 016700  166140                   mov curc,r0              ; get current col
    2668 012220 012701  000402                   mov #tabtab,r1           ; tab table
    2669 012224 060001                           add r0,r1                ; set offset in tabtab
    2670 012226 005301                           dec r1                   ; adjust
    2671 012230 016700  166120                   mov curr,r0              ; get row
    2672 012234 005300                           dec r0                   ; one less
    2673 012236 116000  140040                   movb vgadwh(r0),r0       ; pick up double width bits
    2674                                10$:
    2675 012242 105700                           tstb r0                  ; check if we're on a double-width line
    2676 012244 001405                           beq 12$                  ; r0 flat, so no
    2677 012246 022767  000050  166104           cmp #colhmx,curc         ; check if we're at half colmax?
    2678 012254 001412                           beq 90$                  ; yes, stop there
    2679 012256 000404                           br 14$                   ; no, do the work
    2680                                12$:
    2681 012260 022767  000120  166072           cmp #colmax,curc         ; check if at right limit?
    2682 012266 001405                           beq 90$                  ; yes, stop there
    2683                                14$:
    2684 012270 005267  166064                   inc curc                 ; move one up
    2685 012274 005201                           inc r1                   ; move tabtab pointer
    2686 012276 105711                           tstb (r1)                ; check if it is set?
    2687 012300 001760                           beq 10$                  ; no, again
    2688                                90$:
    2689 012302 004767  176544                   jsr pc,fba               ; normalize
    2690 012306 105067  166052                   clrb lcf                 ; not for vt100
    2691 012312 000207                           rts pc
    2692                                ;
    2693                                ; -------------------------------------------------------------------
    2694                                ;
    2695                                ; clf - lf handler
    2696                                ;
    2697                                clf:
    2698 012314 105767  166224                   tstb anslnm              ; new-line mode on?
    2699 012320 001403                           beq 10$                  ; no
    2700 012322 012767  000001  166030           mov #1,curc              ; set col 1 if it is on
    2701                                10$:
    2702 012330 105767  166216                   tstb decom               ; are we in origin mode?
    2703 012334 001407                           beq 15$                  ; no
    2704 012336 026767  166012  166034           cmp curr,wsize           ; then wsize would be the last line
    2705 012344 103417                           blo 20$                  ; if curr below wsize, then no need to scroll
    2706 012346 004767  176656                   jsr pc,scrl              ; do it
    2707 012352 000420                           br 90$
    2708                                15$:
    2709 012354 026767  165774  166012           cmp curr,tmarg           ; are we within the scroll area?
    2710 012362 103410                           blo 20$                  ; above
    2711 012364 026767  165764  166004           cmp curr,bmarg           ; maybe below?
    2712 012372 101004                           bhi 20$                  ; below
    2713 012374 001003                           bne 20$                  ; or not the same, also no need to scroll
    2714 012376 004767  176626                   jsr pc,scrl              ; go do
    2715 012402 000404                           br 90$
    2716                                20$:
    2717 012404 062767  000001  165742           add #1,curr
    2718 012412 000400                           br 90$
    2719                                90$:
    2720 012414 105067  165744                   clrb lcf                 ; not for vt100
    2721 012420 000207                           rts pc
    2722                                ;
    2723                                ; -------------------------------------------------------------------
    2724                                ;
    2725                                ; ccr - cr handler
    2726                                ;
    2727                                ccr:
    2728 012422 012767  000001  165730           mov #colmin,curc
    2729 012430 004767  176416                   jsr pc,fba
    2730 012434 105067  165724                   clrb lcf
    2731 012440 000207                           rts pc
    2732                                ;
    2733                                ; -------------------------------------------------------------------
    2734                                ;
    2735                                ; cso - so handler
    2736                                ;
    2737                                cso:
    2738 012442 116767  165723  165722           movb g1set,chrset
    2739 012450 000207                           rts pc
    2740                                ;
    2741                                ; -------------------------------------------------------------------
    2742                                ;
    2743                                ; csi - si handler
    2744                                ;
    2745                                csi:
    2746 012452 116767  165712  165712           movb g0set,chrset
    2747 012460 000207                           rts pc
    2748                                ;
    2749                                ; -------------------------------------------------------------------
    2750                                ;
    2751                                ; ccan - can handler FIXME 'it also causes the error character to be displayed'
    2752                                ;
    2753                                ccan:
    2754 012462 012767  000000  166114           mov #psg,pstate
    2755 012470 105067  165670                   clrb lcf                 ; FIXME, only sub should clear LCF acc documentation
    2756 012474 000207                           rts pc
    2757                                ;
    2758                                ; -------------------------------------------------------------------
    2759                                ;
    2760                                ; ground
    2761                                ;
    2762                                lsg:
    2763 012476 105767  166031                   tstb vt105g              ; check if we're in graphics mode?
    2764 012502 001403                           beq 10$                  ; no
    2765 012504 004767  167136                   jsr pc,gparse            ; go do the work
    2766 012510 000411                           br 90$
    2767                                10$:
    2768 012512 120127  000040                   cmpb r1,#40              ; control character?
    2769 012516 103406                           blo 90$                  ; yes, we don't do those here anymore
    2770 012520 120127  000177                   cmpb r1,#177             ; out of 7 bit range?
    2771 012524 103003                           bhis 90$                 ; yes
    2772                                ;
    2773                                ; regular printable characters
    2774                                ;
    2775 012526 004767  177064                   jsr pc,gprint
    2776 012532 000400                           br 90$
    2777                                ;
    2778                                ; exit
    2779                                ;
    2780                                90$:
    2781 012534 000207                           rts pc
    2782                                ;
    2783                                ; -------------------------------------------------------------------
    2784                                ;
    2785                                ; csi param
    2786                                ;
    2787                                lscsip:
    2788 012536 120127  000100                   cmpb r1,#100             ; is this the ending char of the csi sequence?
    2789 012542 103440                           blo 20$                  ; no
    2790 012544 120127  000177                   cmpb r1,#177             ; yes but check it is in range
    2791 012550 103035                           bhis 20$                 ; no, probably an error
    2792 012552 042701  177700                   bic #177700,r1           ; make sure only lowest 6 bits left
    2793 012556 006301                           asl r1                   ; mult by 2
    2794 012560 062701  016356                   add #csitab,r1           ; add start of table
    2795 012564 011101                           mov (r1),r1              ; load address of routine from table
    2796 012566 016767  165764  166004           mov parmt,parm1          ; make normalized copy of 1st parm
    2797 012574 005767  166000                   tst parm1
    2798 012600 001003                           bne 5$
    2799 012602 012767  000001  165770           mov #1,parm1             ; set default
    2800                                5$:
    2801 012610 016767  165744  165764           mov parmt+2,parm2        ; make normalized copy of 2nd parm - more isn't necessary, only the editor commands need normalizing
    2802 012616 005767  165760                   tst parm2
    2803 012622 001003                           bne 6$
    2804 012624 012767  000001  165750           mov #1,parm2
    2805                                6$:
    2806 012632 004711                           jsr pc,(r1)              ; go to the csi routine
    2807 012634 012767  000000  165742           mov #psg,pstate          ; back to ground
    2808 012642 000446                           br 90$
    2809                                ;
    2810                                20$:
    2811 012644 120127  000060                   cmpb r1,#60              ; 30 0
    2812 012650 103431                           blo 30$
    2813 012652 120127  000071                   cmpb r1,#71              ; 39 9
    2814 012656 101026                           bhi 30$
    2815 012660 016700  165670                   mov parmc,r0             ; load parm count
    2816 012664 020027  000016                   cmp r0,#mxcsip           ; check for reasonable value
    2817 012670 103402                           blo 22$                  ; ok?
    2818 012672 012700  000016                   mov #mxcsip,r0           ; if not, load largest offset we can handle
    2819                                22$:
    2820 012676 016002  000556                   mov parmt(r0),r2         ; load old value
    2821 012702 006302                           asl r2                   ; multiply by 10, the hard way. Possibly cheaper than moving to a cpu model that has eis.
    2822 012704 006302                           asl r2
    2823 012706 006302                           asl r2
    2824 012710 066002  000556                   add parmt(r0),r2
    2825 012714 066002  000556                   add parmt(r0),r2
    2826 012720 042701  177760                   bic #177760,r1           ; clear irrelevant bits in the input char
    2827 012724 060102                           add r1,r2                ; add to the total
    2828 012726 010260  000556                   mov r2,parmt(r0)         ; store back
    2829 012732 000412                           br 90$
    2830                                ;
    2831                                30$:
    2832 012734 120127  000073                   cmpb r1,#73              ; 3b ;
    2833 012740 001004                           bne 40$
    2834 012742 062767  000002  165604           add #2,parmc
    2835 012750 000403                           br 90$
    2836                                40$:
    2837 012752 120127  000077                   cmpb r1,#77              ; 3f ?
    2838 012756 001000                           bne 50$
    2839                                ;
    2840                                ; FIXME, I think I can probably get away with ignoring the question mark in ESC[? kind of sequences. If not, then the next plan is to store them in the parm list.
    2841                                ;
    2842                                50$:
    2843                                90$:
    2844 012760 000207                           rts pc
    2845                                ;
    2846                                ; csi ignore
    2847                                ;
    2848                                lscsii:
    2849 012762 012767  000000  165614           mov #psg,pstate
    2850 012770 000207                           rts pc
    2851                                ;
    2852                                ; csi intermediate
    2853                                ;
    2854                                lscsin:
    2855 012772 012767  000000  165604           mov #psg,pstate
    2856 013000 000207                           rts pc
    2857                                ;
    2858                                ; csi entry
    2859                                ;
    2860                                lscsie:
    2861 013002 005067  165546                   clr parmc
    2862 013006 012700  000556                   mov #parmt,r0            ; setup for loop
    2863                                5$:
    2864 013012 005020                           clr (r0)+                ; clear parm
    2865 013014 020027  000576                   cmp r0,#parmt+mxcsip+2   ; hmm this had better be right
    2866 013020 001374                           bne 5$                   ; loop
    2867 013022 120127  000072                   cmpb r1,#72              ; 3a -> transition to csi ignore
    2868 013026 001004                           bne 10$
    2869 013030 012767  000004  165546           mov #pscsii,pstate
    2870 013036 000414                           br 90$
    2871                                10$:
    2872 013040 120127  000060                   cmpb r1,#60              ; 30
    2873 013044 103411                           blo 20$
    2874 013046 120127  000176                   cmpb r1,#176             ; 7e
    2875 013052 101006                           bhi 20$
    2876 013054 012767  000002  165522           mov #pscsip,pstate       ; between 30 and 3f inclusive, except 3a that we tested before; and 40-7e too
    2877 013062 004767  177450                   jsr pc,lscsip            ; and process this character too
    2878 013066 000400                           br 90$
    2879                                20$:
    2880                                90$:
    2881 013070 000207                           rts pc
    2882                                ;
    2883                                ; escape intermediate
    2884                                ;
    2885                                ; I might be able to get away with just mapping this directly from the table and skipping this state. But maybe for later expansion to higher number vt...
    2886                                ;
    2887                                lsei:
    2888 013072 126727  165455  000043           cmpb eichar,#43          ; 23, #
    2889 013100 001036                           bne 20$
    2890 013102 120127  000070                   cmpb r1,#70              ; # 8 - DECALN
    2891 013106 001003                           bne 12$
    2892 013110 004767  171666                   jsr pc,decaln
    2893 013114 000506                           br 90$
    2894                                12$:
    2895 013116 120127  000063                   cmpb r1,#63              ; # 3 - DECDHL top
    2896 013122 001003                           bne 14$
    2897 013124 004767  171700                   jsr pc,decdht
    2898 013130 000500                           br 90$
    2899                                14$:
    2900 013132 120127  000064                   cmpb r1,#64              ; # 4 - DECDHL bottom
    2901 013136 001003                           bne 16$
    2902 013140 004767  171706                   jsr pc,decdhb
    2903 013144 000472                           br 90$
    2904                                16$:
    2905 013146 120127  000065                   cmpb r1,#65              ; # 5 - DECSWL
    2906 013152 001003                           bne 18$
    2907 013154 004767  171736                   jsr pc,decswl
    2908 013160 000464                           br 90$
    2909                                18$:
    2910 013162 120127  000066                   cmpb r1,#66              ; # 6 - DECDWL
    2911 013166 001003                           bne 20$
    2912 013170 004767  171700                   jsr pc,decdwl
    2913 013174 000456                           br 90$
    2914                                20$:
    2915 013176 126727  165351  000050           cmpb eichar,#50          ; 50, ( means font g0 switch
    2916 013204 001005                           bne 30$
    2917 013206 110167  165156                   movb r1,g0set            ; store
    2918 013212 110167  165154                   movb r1,chrset           ; and activate too
    2919 013216 000445                           br 90$
    2920                                30$:
    2921 013220 126727  165327  000051           cmpb eichar,#51          ; 51, ) means font g1 switch
    2922 013226 001005                           bne 40$
    2923 013230 110167  165135                   movb r1,g1set            ; store
    2924 013234 110167  165132                   movb r1,chrset           ; and activate too
    2925 013240 000434                           br 90$
    2926                                40$:
    2927 013242 126727  165305  000131           cmpb eichar,#131         ; Y; VT52 direct cursor address
    2928 013250 001030                           bne 50$                  ; no, check next option
    2929 013252 105767  165253                   tstb vt52                ; check if in vt52 mode?
    2930 013256 001425                           beq 90$                  ; no - that's an error, exit and reset mode to ground
    2931 013260 105767  165246                   tstb vt52yl              ; has the l in ESC-Ylc been set already
    2932 013264 001005                           bne 42$                  ; yes, skip setting it now
    2933 013266 162701  000037                   sub #37,r1               ; debase row number
    2934 013272 110167  165234                   movb r1,vt52yl           ; store it for now
    2935 013276 000420                           br 99$                   ; done, but leave state as is
    2936                                42$:
    2937 013300 162701  000037                   sub #37,r1               ; debase column number
    2938 013304 010167  165050                   mov r1,curc              ; set it in current column
    2939 013310 116701  165216                   movb vt52yl,r1           ; pick up the saved row
    2940 013314 010167  165034                   mov r1,curr              ; set the stored row number
    2941 013320 105067  165206                   clrb vt52yl              ; clear yl for next round
    2942 013324 004767  175522                   jsr pc,fba               ; make sure row and col are normalized
    2943 013330 000400                           br 90$
    2944                                50$:
    2945                                90$:
    2946 013332 012767  000000  165244           mov #psg,pstate
    2947                                99$:
    2948 013340 000207                           rts pc
    2949                                ;
    2950                                ; escape
    2951                                ;
    2952                                lsesc:
    2953 013342 120127  000033                   cmpb r1,#33              ; 1b
    2954 013346 001001                           bne 10$
    2955 013350 000422                           br 90$                   ; ignore
    2956                                10$:
    2957 013352 110167  165175                   movb r1,eichar           ; save the char
    2958 013356 010100                           mov r1,r0                ; make index
    2959 013360 042700  177600                   bic #177600,r0           ; make sure only low 7 bits left
    2960 013364 006300                           asl r0                   ; word index
    2961 013366 016000  015656                   mov esctab(r0),r0        ; get the value
    2962 013372 020027  000100                   cmp r0,#100              ; state value or routine address?
    2963 013376 103003                           bhis 20$                 ; branch for routine
    2964 013400 010067  165200                   mov r0,pstate            ; set new state
    2965 013404 000404                           br 90$
    2966                                20$:
    2967 013406 004710                           jsr pc,(r0)              ; go to esc routine
    2968 013410 012767  000000  165166           mov #psg,pstate          ; set ground
    2969                                90$:
    2970 013416 000207                           rts pc
    2971                                ;
    2972                                ; osc string
    2973                                ;
    2974                                lsosc:
    2975 013420 012767  000000  165156           mov #psg,pstate
    2976 013426 000207                           rts pc
    2977                                ;
    2978                                ; sos/pm/apc string
    2979                                ;
    2980                                lsstr:
    2981 013430 012767  000000  165146           mov #psg,pstate
    2982 013436 000207                           rts pc
    2983                                ;
    2984                                ; dcs entry
    2985                                ;
    2986                                lsdcse:
    2987 013440 012767  000000  165136           mov #psg,pstate
    2988 013446 000207                           rts pc
    2989                                ;
    2990                                ; dcs param
    2991                                ;
    2992                                lsdcsp:
    2993 013450 012767  000000  165126           mov #psg,pstate
    2994 013456 000207                           rts pc
    2995                                ;
    2996                                ; dcs ignore
    2997                                ;
    2998                                lsdcsi:
    2999 013460 012767  000000  165116           mov #psg,pstate
    3000 013466 000207                           rts pc
    3001                                ;
    3002                                ; dcs intermediate
    3003                                ;
    3004                                lsdcsn:
    3005 013470 012767  000000  165106           mov #psg,pstate
    3006 013476 000207                           rts pc
    3007                                ;
    3008                                ; dcs passthrough
    3009                                ;
    3010                                lsdcst:
    3011 013500 012767  000000  165076           mov #psg,pstate
    3012 013506 000207                           rts pc
    3013                                ;
    3014                                ; error/dummy state
    3015                                ;
    3016                                lsdummy:
    3017 013510 012767  000000  165066           mov #psg,pstate
    3018 013516 000207                           rts pc
    3019                                ;
    3020                                ; gbclr - clear the graph buffers
    3021                                ;
    3022                                gbclr:
    3023 013520 010246                           mov r2,-(r6)                  ; push r2
    3024 013522 010146                           mov r1,-(r6)                  ; push r1
    3025 013524 005000                           clr r0                        ; zero
    3026 013526 012701  110000                   mov #110000,r1                ; start of graph0
    3027 013532 012702  114000                   mov #114000,r2                ; end of graph1
    3028                                10$:
    3029 013536 010021                           mov r0,(r1)+                  ; loop over buffer; word write so this clears both graph points and markers
    3030 013540 020201                           cmp r2,r1                     ; check for end
    3031 013542 001375                           bne 10$                       ; branch if not yet
    3032                                80$:
    3033 013544 012601                           mov (r6)+,r1                  ; pop r1
    3034 013546 012602                           mov (r6)+,r2                  ; pop r2
    3035 013550 000207                           rts pc
    3036                                ;
    3037                                ; rcvgetc - routine to consume a character from the slu rcv buf. Clobbers r0,r1; r0 is nonzero if a character is produced in r1
    3038                                ;
    3039                                rcvgetc:
    3040 013552 012737  000340  177776           mov #340,@#177776             ; disable interrupts
    3041 013560 016700  164562                   mov rcvprod,r0                ; get produce pointer in r0
    3042 013564 016701  164554                   mov rcvcons,r1                ; get consume pointer in r1
    3043 013570 020001                           cmp r0,r1                     ; equal?
    3044 013572 001002                           bne 10$                       ; no, continue
    3045 013574 005000                           clr r0                        ; equal, signal buffer was empty
    3046 013576 000436                           br 90$                        ; goto exit
    3047                                10$:
    3048 013600 005367  164534                   dec rcvbfc                    ; decrement buffer count
    3049 013604 005200                           inc r0                        ; increment produce pointer - we're producing
    3050 013606 020027  000200                   cmp r0,#rcvbln                ; need to wrap?
    3051 013612 103401                           blo 20$                       ; no, jump
    3052 013614 005000                           clr r0                        ; wrap in buffer
    3053                                20$:
    3054 013616 010067  164524                   mov r0,rcvprod                ; store updated produce pointer
    3055 013622 062700  000100                   add #rcvbuf,r0                ; add address to offset
    3056 013626 111001                           movb (r0),r1                  ; load byte into r1; r0 - success flag - is certain to be nonzero after using it as the address
    3057 013630 042701  177400                   bic #177400,r1                ; make sure upper byte is clear
    3058                                ;
    3059 013634 105767  164502                   tstb xoff                     ; check xoff state
    3060 013640 001415                           beq 30$                       ; not on, nothing to do
    3061 013642 026727  164472  000020           cmp rcvbfc,#rcvblo            ; check against low water mark
    3062 013650 103011                           bhis 30$                      ; still over, then branch
    3063 013652 105767  164465                   tstb xoffm                    ; check xoff-manual state
    3064 013656 001006                           bne 30$                       ; on, then don't send xon automatically
    3065 013660 012700  000021                   mov #21,r0                    ; load dc1/control-q
    3066 013664 004767  001122                   jsr pc,xmit                   ; send it
    3067 013670 105067  164446                   clrb xoff                     ; clear flag
    3068                                30$:
    3069                                90$:
    3070 013674 012737  000000  177776           mov #0,@#177776               ; enable interrupts
    3071 013702 000207                           rts pc
    3072                                ;
    3073                                ; ps2getc - routine to consume a character from the ps2 rcv buf. Clobbers r0,r1; r0 is nonzero if a character is produced in r1
    3074                                ;
    3075                                ps2getc:
    3076 013704 012737  000340  177776           mov #340,@#177776             ; disable interrupts
    3077 013712 016700  164434                   mov ps2prod,r0                ; get produce pointer in r0
    3078 013716 016701  164426                   mov ps2cons,r1                ; get consume pointer in r1
    3079 013722 020001                           cmp r0,r1                     ; equal?
    3080 013724 001002                           bne 10$                       ; no, continue
    3081 013726 005000                           clr r0                        ; equal, signal buffer was empty
    3082 013730 000414                           br 90$                        ; goto exit
    3083                                10$:
    3084 013732 005200                           inc r0                        ; increment produce pointer - we're producing
    3085 013734 020027  000040                   cmp r0,#ps2bln                ; need to wrap?
    3086 013740 103401                           blo 20$                       ; no, jump
    3087 013742 005000                           clr r0                        ; wrap in buffer
    3088                                20$:
    3089 013744 010067  164402                   mov r0,ps2prod                ; store updated produce pointer
    3090 013750 062700  000300                   add #ps2buf,r0                ; add address to offset
    3091 013754 111001                           movb (r0),r1                  ; load byte into r1; r0 - success flag - is certain to be nonzero after using it as the address
    3092 013756 042701  177400                   bic #177400,r1                ; make sure upper byte is clear
    3093                                90$:
    3094 013762 012737  000000  177776           mov #0,@#177776               ; enable interrupts
    3095 013770 000207                           rts pc
    3096                                ;
    3097                                ; ps2xku - routine to maintain status flags for key up events
    3098                                ;
    3099                                ps2xku:
    3100 013772 120127  000024                   cmpb r1,#24                   ; left control
    3101 013776 001011                           bne 14$
    3102 014000 105767  164517                   tstb ps2ex
    3103 014004 001003                           bne 10$
    3104 014006 105067  164512                   clrb ps2lc
    3105 014012 000415                           br 20$
    3106                                10$:
    3107 014014 105067  164505                   clrb ps2rc
    3108 014020 000412                           br 20$
    3109                                14$:
    3110 014022 120127  000022                   cmpb r1,#22                   ; left shift
    3111 014026 001002                           bne 18$
    3112 014030 105067  164472                   clrb ps2ls
    3113                                18$:
    3114 014034 120127  000131                   cmpb r1,#131                  ; right shift
    3115 014040 001002                           bne 20$
    3116 014042 105067  164461                   clrb ps2rs
    3117                                20$:
    3118 014046 000207                           rts pc
    3119                                ;
    3120                                ; ps2xkd - routine to maintain status flags for key down events
    3121                                ;
    3122                                ps2xkd:
    3123 014050 010100                           mov r1,r0                     ; set return code to nonzero
    3124 014052 120127  000024                   cmpb r1,#24                   ; left control, or right control if extended flag is on
    3125 014056 001015                           bne 14$
    3126 014060 105767  164437                   tstb ps2ex                    ; extended flag on?
    3127 014064 001005                           bne 10$
    3128 014066 112767  000001  164430           movb #1,ps2lc                 ; hex 14 - left control down
    3129 014074 005000                           clr r0
    3130 014076 000444                           br 90$
    3131                                10$:
    3132 014100 112767  000001  164417           movb #1,ps2rc                 ; hex e0 14 - right control down
    3133 014106 005000                           clr r0
    3134 014110 000437                           br 90$
    3135                                14$:
    3136 014112 120127  000022                   cmpb r1,#22                   ; left shift
    3137 014116 001005                           bne 18$
    3138 014120 112767  000001  164400           movb #1,ps2ls
    3139 014126 005000                           clr r0
    3140 014130 000427                           br 90$
    3141                                18$:
    3142 014132 120127  000131                   cmpb r1,#131                  ; right shift
    3143 014136 001005                           bne 20$
    3144 014140 112767  000001  164361           movb #1,ps2rs
    3145 014146 005000                           clr r0
    3146 014150 000417                           br 90$
    3147                                20$:
    3148 014152 120127  000130                   cmpb r1,#130                  ; caps lock
    3149 014156 001014                           bne 30$
    3150 014160 105767  164344                   tstb ps2cl
    3151 014164 001404                           beq 25$
    3152 014166 105067  164336                   clrb ps2cl
    3153 014172 005000                           clr r0
    3154 014174 000405                           br 90$
    3155                                25$:
    3156 014176 112767  000001  164324           movb #1,ps2cl
    3157 014204 005000                           clr r0
    3158 014206 000400                           br 90$
    3159                                30$:
    3160                                90$:
    3161 014210 000207                           rts pc
    3162                                ;
    3163                                ; ps2xlt - routine to translate ps2 scan code to ascii. Input scancode in r1; output code or ascii in r1, r0 nonzero if valid
    3164                                ;
    3165                                ps2xlt:
    3166 014212 105767  164304                   tstb ps2up                    ; check up flag
    3167 014216 001410                           beq 1$                        ; skip if not set
    3168 014220 004767  177546                   jsr pc,ps2xku                 ; call routine for break processing - all others can be skipped
    3169 014224 105067  164272                   clrb ps2up                    ; clear up flag
    3170 014230 105067  164267                   clrb ps2ex                    ; clear ext flag
    3171                                ;         br 99$                        ; done, no production
    3172 014234 005000                           clr r0                        ; set flag for no production
    3173 014236 000207                           rts pc                        ; return
    3174                                
    3175                                1$:
    3176 014240 120127  000340                   cmpb r1,#340                  ; check if the current code is e0
    3177 014244 001004                           bne 2$
    3178 014246 110167  164251                   movb r1,ps2ex                 ; set marker
    3179                                ;         br 99$                        ; done, no production
    3180 014252 005000                           clr r0                        ; set flag for no production
    3181 014254 000207                           rts pc                        ; return
    3182                                2$:
    3183 014256 120127  000360                   cmpb r1,#360                  ; check if the current code is f0
    3184 014262 001004                           bne 3$
    3185 014264 110167  164232                   movb r1,ps2up                 ; set marker
    3186                                ;         br 99$                        ; done, no production
    3187 014270 005000                           clr r0                        ; set flag for no production
    3188 014272 000207                           rts pc                        ; return
    3189                                3$:
    3190                                10$:
    3191 014274 105767  164223                   tstb ps2ex                    ; extended key code flag set?
    3192 014300 001422                           beq 12$                       ; no
    3193 014302 105767  164214                   tstb ps2up                    ; key up flag set?
    3194 014306 001164                           bne 99$                       ; already did those, done here
    3195 014310 004767  177534                   jsr pc,ps2xkd                 ; check for extended key down. Right control only, really
    3196 014314 105067  164203                   clrb ps2ex                    ; clear the extended code flag
    3197 014320 005700                           tst r0                        ; did we get anything?
    3198 014322 001556                           beq 99$                       ; done, no production
    3199 014324 105067  164173                   clrb ps2ex                    ; clear extended key code flag
    3200 014330 042701  177600                   bic #177600,r1                ; mask to low 7 bits
    3201 014334 116101  017240                   movb ps2tb3(r1),r1            ; load the code
    3202 014340 105701                           tstb r1                       ; check if we got anything
    3203 014342 001401                           beq 12$                       ; no
    3204 014344 000542                           br 98$                        ; done, exit with result
    3205                                12$:
    3206 014346 120127  000360                   cmpb r1,#360                  ; key up - f0?
    3207 014352 001004                           bne 14$                       ; no
    3208 014354 112767  000001  164140           movb #1,ps2up                 ; set flag
    3209 014362 000536                           br 99$
    3210                                14$:
    3211 014364 120127  000340                   cmpb r1,#340                  ; extended key - e0?
    3212 014370 001004                           bne 16$                       ; no
    3213 014372 112767  000001  164123           movb #1,ps2ex                 ; set flag
    3214 014400 000527                           br 99$
    3215                                16$:
    3216 014402 004767  177442                   jsr pc,ps2xkd                 ; process key down status events
    3217 014406 005700                           tst r0                        ; result?
    3218 014410 001001                           bne 18$                       ; no
    3219 014412 000522                           br 99$
    3220                                18$:
    3221 014414 132701  000200                   bitb #200,r1                  ; check if bit is set
    3222 014420 001117                           bne 99$                       ; yes, skip rest - don't know what to do with it
    3223                                20$:
    3224 014422 042701  177600                   bic #177600,r1                ; mask to low 7 bits
    3225 014426 105767  164072                   tstb ps2lc                    ; left control down?
    3226 014432 001004                           bne 30$                       ; yes
    3227 014434 105767  164065                   tstb ps2rc                    ; right control down?
    3228 014440 001001                           bne 30$                       ; yes
    3229 014442 000460                           br 60$                        ; neither control key active, onwards
    3230                                30$:
    3231 014444 105767  164056                   tstb ps2ls                    ; left shift down?
    3232 014450 001006                           bne 32$                       ; yes, load from shifted table
    3233 014452 105767  164051                   tstb ps2rs                    ; right shift down?
    3234 014456 001003                           bne 32$                       ; yes, load from shifted table
    3235 014460 116101  016640                   movb ps2tb1(r1),r1            ; load byte from unshifted table
    3236 014464 000402                           br 33$                        ; skip forward
    3237                                32$:
    3238 014466 116101  017040                   movb ps2tb2(r1),r1            ; load from shifted table
    3239                                33$:
    3240 014472 105701                           tstb r1                       ; was something nonzero there?
    3241 014474 001471                           beq 99$                       ; no, then done without result
    3242 014476 120127  000141                   cmpb r1,#141                  ; lower case a
    3243 014502 103424                           blo 40$                       ; below? then check the other ranges
    3244 014504 120127  000172                   cmpb r1,#172                  ; lower case z
    3245 014510 101063                           bhi 99$                       ; over? then done without result
    3246 014512 162701  000140                   sub #140,r1                   ; controllify
    3247 014516 120127  000023                   cmpb r1,#23                   ; is it xoff/ctrl-s?
    3248 014522 001003                           bne 35$                       ; no, continue
    3249 014524 105267  163613                   incb xoffm                    ; set xoff-manual flag
    3250 014530 000410                           br 39$                        ; done
    3251                                35$:
    3252 014532 120127  000021                   cmpb r1,#21                   ; is it xon/ctrl-q?
    3253 014536 001005                           bne 39$                       ; no, continue
    3254 014540 105067  163577                   clrb xoffm                    ; clear xoff-manual flag
    3255 014544 105067  163572                   clrb xoff                     ; and also clear xoff flag
    3256 014550 000400                           br 39$                        ; done
    3257                                39$:
    3258 014552 000437                           br 98$                        ; exit and produce
    3259                                40$:
    3260 014554 120127  000100                   cmpb r1,#100                  ; @
    3261 014560 001406                           beq 41$                       ; equal? then go
    3262 014562 120127  000133                   cmpb r1,#133                  ; [
    3263 014566 103434                           blo 99$                       ; lower? then no result
    3264 014570 120127  000137                   cmpb r1,#137                  ; _
    3265 014574 101031                           bhi 99$                       ; higher? then no result
    3266                                41$:
    3267 014576 162701  000100                   sub #100,r1                   ; controllify
    3268 014602 000423                           br 98$                        ; exit and produce
    3269                                60$:
    3270 014604 105767  163716                   tstb ps2ls                    ; left shift down?
    3271 014610 001011                           bne 70$                       ; yes
    3272 014612 105767  163711                   tstb ps2rs                    ; right shift down?
    3273 014616 001006                           bne 70$                       ; yes
    3274 014620 105767  163704                   tstb ps2cl                    ; caps lock on?
    3275 014624 001003                           bne 70$                       ; yes
    3276 014626 116101  016640                   movb ps2tb1(r1),r1            ; load from regular translate table
    3277 014632 000402                           br 72$
    3278                                70$:
    3279 014634 116101  017040                   movb ps2tb2(r1),r1            ; load from shifted translate table
    3280                                72$:
    3281 014640 042701  177400                   bic #177400,r1                ; clear upper byte
    3282 014644 105701                           tstb r1                       ; was something nonzero there?
    3283 014646 001404                           beq 99$                       ; no - finished
    3284 014650 000400                           br 98$
    3285                                
    3286                                98$:                                   ; exit path, code translated, make sure r0 is nonzero
    3287 014652 012700  000001                   mov #1,r0
    3288 014656 000207                           rts pc
    3289                                
    3290                                99$:                                   ; exit path, no code - make sure r0 is zero
    3291 014660 005000                           clr r0
    3292 014662 000207                           rts pc
    3293                                
    3294                                ;
    3295                                ; interrupt service routine - receive from slu
    3296                                ;
    3297                                ivecrcv:
    3298 014664 105737  177560                   tstb @#rcsr                   ; check slu - did we really receive something?
    3299 014670 100044                           bpl 90$                       ; positive means ready bit is not set
    3300 014672 010046                           mov r0,-(sp)                  ; save r0
    3301 014674 010146                           mov r1,-(sp)                  ; save r1
    3302                                
    3303 014676 113701  177562                   movb @#rbuf,r1                ; copy received character into r1 - this also resets the receiver for the next byte
    3304                                
    3305 014702 016700  163436                   mov rcvcons,r0                ; get consume pointer in r0
    3306 014706 005200                           inc r0                        ; increment consume pointer - we're about to consume
    3307 014710 020027  000200                   cmp r0,#rcvbln                ; check for max size of buffer
    3308 014714 103401                           blo 20$                       ; less?
    3309 014716 005000                           clr r0                        ; if not less, then start at zero
    3310                                20$:
    3311 014720 020067  163422                   cmp r0,rcvprod                ; after incrementing consume, produce and consume should not be the same - that would mean a buffer overrun
    3312 014724 001407                           beq 80$                       ; skip storing if buffer overrun
    3313 014726 005267  163406                   inc rcvbfc                    ; increment buffer count
    3314 014732 010067  163406                   mov r0,rcvcons                ; update consume pointer
    3315 014736 062700  000100                   add #rcvbuf,r0                ; add base to pointer
    3316 014742 110110                           movb r1,(r0)                  ; store the received character into buffer
    3317                                80$:
    3318 014744 026727  163370  000120           cmp rcvbfc,#rcvbhi            ; above high water mark?
    3319 014752 103411                           blo 85$                       ; no, go on
    3320 014754 105767  163362                   tstb xoff                     ; are we in xoff state already?
    3321 014760 001006                           bne 85$                       ; yes, don't send again
    3322 014762 105267  163354                   incb xoff                     ; set xoff flag
    3323 014766 012700  000023                   mov #23,r0                    ; load ctrl-s/dc3
    3324 014772 004767  000014                   jsr pc,xmit                   ; send
    3325                                85$:
    3326 014776 012601                           mov (sp)+,r1                  ; restore r1
    3327 015000 012600                           mov (sp)+,r0                  ; restore r0
    3328                                90$:
    3329 015002 012737  000100  177560           mov #100,@#rcsr               ; make sure interrupt enable is set again
    3330 015010 000002                           rti
    3331                                ;
    3332                                ; xmit - for now, the bare minimum to get stuff out. May need to be reworked to a queue and interrupt thing later
    3333                                ;
    3334                                xmit:
    3335                                10$:
    3336 015012 105737  177564                   tstb @#xcsr                   ; check if xmit ready bit is set
    3337 015016 100375                           bpl 10$                       ; jump if not
    3338 015020 110037  177566                   movb r0,@#xbuf                ; write the xmit register
    3339 015024 000207                           rts pc
    3340                                ;
    3341                                ; interrupt service routine - slu xmit
    3342                                ;
    3343                                ivecxmt:
    3344 015026 000002                           rti
    3345                                
    3346                                ;
    3347                                ; interrupt service routine - receive from ps2
    3348                                ;
    3349                                ivecps2:
    3350 015030 105737  150000                   tstb @#150000                 ; check ps2 - did we really receive something?
    3351 015034 100026                           bpl 90$                       ; positive means ready bit is not set
    3352 015036 010046                           mov r0,-(sp)                  ; save r0
    3353 015040 010146                           mov r1,-(sp)                  ; save r1
    3354                                
    3355 015042 016700  163302                   mov ps2cons,r0                ; get consume pointer in r0
    3356 015046 016701  163300                   mov ps2prod,r1                ; get produce pointer in r1
    3357 015052 005200                           inc r0                        ; increment consume pointer - we're about to consume
    3358 015054 020027  000040                   cmp r0,#ps2bln                ; check for max size of buffer
    3359 015060 103401                           blo 20$                       ; less?
    3360 015062 005000                           clr r0                        ; if yes, then start at zero
    3361                                20$:
    3362 015064 020001                           cmp r0,r1                     ; after incrementing consume, produce and consume should not be the same - that would mean a buffer overrun
    3363 015066 001407                           beq 80$                       ; skip storing if buffer overrun
    3364                                
    3365 015070 010067  163254                   mov r0,ps2cons                ; update consume pointer
    3366 015074 113701  150002                   movb @#150002,r1              ; copy received character into r1
    3367 015100 062700  000300                   add #ps2buf,r0                ; add base to pointer
    3368 015104 110110                           movb r1,(r0)                  ; store into buffer
    3369                                
    3370                                80$:
    3371 015106 012601                           mov (sp)+,r1                  ; restore r1
    3372 015110 012600                           mov (sp)+,r0                  ; restore r0
    3373                                90$:
    3374 015112 012737  000100  150000           mov #100,@#150000             ; make sure interrupt enable is set again
    3375 015120 000002                           rti
    3376                                
    3377 015122    110     145     154  hello:   .asciz /Hello, world: [PDP2011 vt100]/
         015125    154     157     054  
         015130    040     167     157  
         015133    162     154     144  
         015136    072     040     133  
         015141    120     104     120  
         015144    062     060     061  
         015147    061     040     166  
         015152    164     061     060  
         015155    060     135     000  
    3378 015160    110     145     154  hel105:  .asciz /Hello, world: [PDP2011 vt105]/
         015163    154     157     054  
         015166    040     167     157  
         015171    162     154     144  
         015174    072     040     133  
         015177    120     104     120  
         015202    062     060     061  
         015205    061     040     166  
         015210    164     061     060  
         015213    065     135     000  
    3379                                
    3380                                         .even
    3381                                ;
    3382                                ; parser jump table
    3383                                ;
    3384 015216 012476                  ptab:    .word lsg                ; parse state: ground                     ; 0
    3385 015220 012536                           .word lscsip             ; parse state: csi param                  ; 2
    3386 015222 012762                           .word lscsii             ; parse state: csi ignore                 ; 4
    3387 015224 012772                           .word lscsin             ; parse state: csi intermediate           ; 6
    3388 015226 013002                           .word lscsie             ; parse state: csi entry                  ; 10
    3389 015230 013072                           .word lsei               ; parse state: escape intermediate        ; 12
    3390 015232 013342                           .word lsesc              ; parse state: escape                     ; 14
    3391 015234 013420                           .word lsosc              ; parse state: osc string                 ; 16
    3392 015236 013430                           .word lsstr              ; parse state: sos/pm/apc string          ; 20
    3393 015240 013440                           .word lsdcse             ; parse state: dcs entry                  ; 22
    3394 015242 013450                           .word lsdcsp             ; parse state: dcs param                  ; 24
    3395 015244 013460                           .word lsdcsi             ; parse state: dcs ignore                 ; 26
    3396 015246 013470                           .word lsdcsn             ; parse state: dcs intermediate           ; 30
    3397 015250 013500                           .word lsdcst             ; parse state: dcs passthrough            ; 32
    3398 015252 013510                           .word lsdummy            ; parse state: dummy                      ; 34
    3399 015254 013510                           .word lsdummy            ; parse state: dummy                      ; 36
    3400                                ;
    3401                                ; table for state transitions from anywhere
    3402                                ;
    3403                                ptrans:
    3404                                ;                   0      1      2      3      4      5      6      7      8      9      a      b      c      d      e      f
    3405 015256    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 00-0f
         015261    000     000     000  
         015264    000     000     000  
         015267    000     000     000  
         015272    000     000     000  
         015275    000                  
    3406 015276    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,   psg,     0,   psg, psesc,     0,     0,     0,     0   ; 10-1f
         015301    000     000     000  
         015304    000     000     000  
         015307    000     000     014  
         015312    000     000     000  
         015315    000                  
    3407 015316    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 20-2f
         015321    000     000     000  
         015324    000     000     000  
         015327    000     000     000  
         015332    000     000     000  
         015335    000                  
    3408 015336    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 30-3f
         015341    000     000     000  
         015344    000     000     000  
         015347    000     000     000  
         015352    000     000     000  
         015355    000                  
    3409 015356    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 40-4f
         015361    000     000     000  
         015364    000     000     000  
         015367    000     000     000  
         015372    000     000     000  
         015375    000                  
    3410 015376    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 50-5f
         015401    000     000     000  
         015404    000     000     000  
         015407    000     000     000  
         015412    000     000     000  
         015415    000                  
    3411 015416    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 60-6f
         015421    000     000     000  
         015424    000     000     000  
         015427    000     000     000  
         015432    000     000     000  
         015435    000                  
    3412 015436    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 70-7f
         015441    000     000     000  
         015444    000     000     000  
         015447    000     000     000  
         015452    000     000     000  
         015455    000                  
    3413 015456    000     000     000           .byte    psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg   ; 80-8f
         015461    000     000     000  
         015464    000     000     000  
         015467    000     000     000  
         015472    000     000     000  
         015475    000                  
    3414 015476    022     000     000           .byte psdcse,   psg,   psg,   psg,   psg,   psg,   psg,   psg, psstr,   psg,   psg,pscsie,   psg, psosc, psstr, psstr   ; 90-9f
         015501    000     000     000  
         015504    000     000     020  
         015507    000     000     010  
         015512    000     016     020  
         015515    020                  
    3415 015516    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; a0-af
         015521    000     000     000  
         015524    000     000     000  
         015527    000     000     000  
         015532    000     000     000  
         015535    000                  
    3416 015536    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; b0-bf
         015541    000     000     000  
         015544    000     000     000  
         015547    000     000     000  
         015552    000     000     000  
         015555    000                  
    3417 015556    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; c0-cf
         015561    000     000     000  
         015564    000     000     000  
         015567    000     000     000  
         015572    000     000     000  
         015575    000                  
    3418 015576    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; d0-df
         015601    000     000     000  
         015604    000     000     000  
         015607    000     000     000  
         015612    000     000     000  
         015615    000                  
    3419 015616    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; e0-ef
         015621    000     000     000  
         015624    000     000     000  
         015627    000     000     000  
         015632    000     000     000  
         015635    000                  
    3420 015636    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; f0-ff
         015641    000     000     000  
         015644    000     000     000  
         015647    000     000     000  
         015652    000     000     000  
         015655    000                  
    3421                                ;
    3422                                ; esctab - states and routines for escape state
    3423                                ;
    3424                                esctab:
    3425                                ;                   0      1      2      3      4      5      6      7      8      9      a      b      c      d      e      f
    3426 015656 000000  000000  000000           .word      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 00-0f
         015664 000000  000000  000000  
         015672 000000  000000  000000  
         015700 000000  000000  000000  
         015706 000000  000000  000000  
         015714 000000                  
    3427 015716 000000  000000  000000           .word      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 10-1f
         015724 000000  000000  000000  
         015732 000000  000000  000000  
         015740 000000  000000  000000  
         015746 000000  000000  000000  
         015754 000000                  
    3428 015756 000012  000012  000012           .word   psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei   ; 20-2f
         015764 000012  000012  000012  
         015772 000012  000012  000012  
         016000 000012  000012  000012  
         016006 000012  000012  000012  
         016014 000012                  
    3429 016016 000000  005410  005430           .word      0,  esc1,  esc2,     0,     0,     0,     0,  esc7,  esc8,     0,     0,     0, esc3c, esc3d, esc3e,     0   ; 30-3f
         016024 000000  000000  000000  
         016032 000000  005436  005476  
         016040 000000  000000  000000  
         016046 005542  005550  005560  
         016054 000000                  
    3430 016056 000000  005566  005600           .word      0, escua, escub, escuc, escud, escue, escuf, escug, escuh, escui, escuj, escuk,     0, escum,     0,     0   ; 40-4f
         016064 005612  005624  005674  
         016072 005732  005734  005736  
         016100 006000  006030  006052  
         016106 000000  006102  000000  
         016114 000000                  
    3431 016116 000000  000000  000000           .word      0,     0,     0,     0,     0,     0,     0,     0,     0,  psei, escuz,pscsie,     0,     0,     0,     0   ; 50-5f
         016124 000000  000000  000000  
         016132 000000  000000  000000  
         016140 000012  006156  000010  
         016146 000000  000000  000000  
         016154 000000                  
    3432 016156 000000  000000  000000           .word      0,     0,     0, esclc,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 60-6f
         016164 006224  000000  000000  
         016172 000000  000000  000000  
         016200 000000  000000  000000  
         016206 000000  000000  000000  
         016214 000000                  
    3433 016216 000000  000000  000000           .word      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 70-7f
         016224 000000  000000  000000  
         016232 000000  000000  000000  
         016240 000000  000000  000000  
         016246 000000  000000  000000  
         016254 000000                  
    3434                                ;
    3435                                ; ctab - a routine for each control character
    3436                                ;
    3437                                ctab:
    3438 016256 012060                           .word cnul                    ; NUL - 000
    3439 016260 000000                           .word 0                       ;     - 001
    3440 016262 000000                           .word 0                       ;     - 002
    3441 016264 000000                           .word 0                       ;     - 003
    3442 016266 000000                           .word 0                       ;     - 004
    3443 016270 012062                           .word cenq                    ; ENQ - 005
    3444 016272 000000                           .word 0                       ;     - 006
    3445 016274 000000                           .word 0                       ;     - 007
    3446 016276 012174                           .word cbs                     ; BS  - 010
    3447 016300 012214                           .word cht                     ; HT  - 011
    3448 016302 012314                           .word clf                     ; LF  - 012
    3449 016304 012314                           .word clf                     ; VT  - 013
    3450 016306 012314                           .word clf                     ; FF  - 014
    3451 016310 012422                           .word ccr                     ; CR  - 015
    3452 016312 012442                           .word cso                     ; SO  - 016
    3453 016314 012452                           .word csi                     ; SI  - 017
    3454 016316 000000                           .word 0                       ;     - 020
    3455 016320 000000                           .word 0                       ; DC1 - 021 - XON
    3456 016322 000000                           .word 0                       ;     - 022
    3457 016324 000000                           .word 0                       ; DC3 - 023 - XOFF
    3458 016326 000000                           .word 0                       ;     - 024
    3459 016330 000000                           .word 0                       ;     - 025
    3460 016332 000000                           .word 0                       ;     - 026
    3461 016334 000000                           .word 0                       ;     - 027
    3462 016336 012462                           .word ccan                    ; CAN - 030
    3463 016340 000000                           .word 0                       ;     - 031
    3464 016342 012462                           .word ccan                    ; SUB - 032
    3465 016344 000000                           .word 0                       ; ESC - 033
    3466 016346 000000                           .word 0                       ;     - 034
    3467 016350 000000                           .word 0                       ;     - 035
    3468 016352 000000                           .word 0                       ;     - 036
    3469 016354 000000                           .word 0                       ;     - 037
    3470                                ;
    3471                                ; csitab - a routine for each control sequence
    3472                                ;
    3473                                csitab:
    3474 016356 006230                           .word csiat                   ; @  - 100
    3475 016360 006320                           .word csiua                   ; A  - 101
    3476 016362 006340                           .word csiub                   ; B  - 102
    3477 016364 006360                           .word csiuc                   ; C  - 103
    3478 016366 006400                           .word csiud                   ; D  - 104
    3479 016370 011050                           .word csinul                  ; E  - 105
    3480 016372 011050                           .word csinul                  ; F  - 106
    3481 016374 011050                           .word csinul                  ; G  - 107
    3482 016376 006420                           .word csiuh                   ; H  - 110
    3483 016400 011050                           .word csinul                  ; I  - 111
    3484 016402 006446                           .word csiuj                   ; J  - 112
    3485 016404 006600                           .word csiuk                   ; K  - 113
    3486 016406 006740                           .word csiul                   ; L  - 114
    3487 016410 007064                           .word csium                   ; M  - 115
    3488 016412 011050                           .word csinul                  ; N  - 115
    3489 016414 011050                           .word csinul                  ; O  - 116
    3490 016416 007216                           .word csiup                   ; P  - 120
    3491 016420 011050                           .word csinul                  ; Q  - 121
    3492 016422 011050                           .word csinul                  ; R  - 122
    3493 016424 011050                           .word csinul                  ; S  - 123
    3494 016426 011050                           .word csinul                  ; T  - 124
    3495 016430 011050                           .word csinul                  ; U  - 125
    3496 016432 011050                           .word csinul                  ; V  - 126
    3497 016434 011050                           .word csinul                  ; W  - 127
    3498 016436 007302                           .word csiux                   ; X  - 130
    3499 016440 011050                           .word csinul                  ; Y  - 131
    3500 016442 011050                           .word csinul                  ; Z  - 132
    3501 016444 011050                           .word csinul                  ; [  - 133
    3502 016446 011050                           .word csinul                  ; \  - 134
    3503 016450 011050                           .word csinul                  ; ]  - 135
    3504 016452 011050                           .word csinul                  ; ^  - 136
    3505 016454 011050                           .word csinul                  ; _  - 137
    3506 016456 011050                           .word csinul                  ; `  - 140
    3507 016460 011050                           .word csinul                  ; a  - 141
    3508 016462 011050                           .word csinul                  ; b  - 142
    3509 016464 007356                           .word csilc                   ; c  - 143
    3510 016466 011050                           .word csinul                  ; d  - 144
    3511 016470 011050                           .word csinul                  ; e  - 145
    3512 016472 007410                           .word csilf                   ; f  - 146
    3513 016474 007416                           .word csilg                   ; g  - 147
    3514 016476 007474                           .word csilh                   ; h  - 150
    3515 016500 011050                           .word csinul                  ; i  - 151
    3516 016502 011050                           .word csinul                  ; j  - 152
    3517 016504 011050                           .word csinul                  ; k  - 153
    3518 016506 007672                           .word csill                   ; l  - 154
    3519 016510 010106                           .word csilm                   ; m  - 155
    3520 016512 010326                           .word csiln                   ; n  - 156
    3521 016514 011050                           .word csinul                  ; o  - 157
    3522 016516 011050                           .word csinul                  ; p  - 160
    3523 016520 011050                           .word csinul                  ; q  - 161
    3524 016522 010570                           .word csilr                   ; r  - 162
    3525 016524 011050                           .word csinul                  ; s  - 163
    3526 016526 011050                           .word csinul                  ; t  - 164
    3527 016530 011050                           .word csinul                  ; u  - 165
    3528 016532 011050                           .word csinul                  ; v  - 166
    3529 016534 011050                           .word csinul                  ; w  - 167
    3530 016536 010706                           .word csilx                   ; x  - 170
    3531 016540 011044                           .word csily                   ; y  - 171
    3532 016542 011050                           .word csinul                  ; z  - 172
    3533 016544 011050                           .word csinul                  ; {  - 173
    3534 016546 011050                           .word csinul                  ; |  - 174
    3535 016550 011050                           .word csinul                  ; }  - 175
    3536 016552 011050                           .word csinul                  ; ~  - 176
    3537 016554 011050                           .word csinul                  ; DEL  - 177
    3538                                ;
    3539                                ; ltab: a table of the starting address of each line within the buffer
    3540                                ;
    3541                                ltab:
    3542 016556 100000                           .word 100000                  ; line 1
    3543 016560 100240                           .word 100240                  ; line 2
    3544 016562 100500                           .word 100500                  ; line 3
    3545 016564 100740                           .word 100740                  ; line 4
    3546 016566 101200                           .word 101200                  ; line 5
    3547 016570 101440                           .word 101440                  ; line 6
    3548 016572 101700                           .word 101700                  ; line 7
    3549 016574 102140                           .word 102140                  ; line 8
    3550 016576 102400                           .word 102400                  ; line 9
    3551 016600 102640                           .word 102640                  ; line 10
    3552 016602 103100                           .word 103100                  ; line 11
    3553 016604 103340                           .word 103340                  ; line 12
    3554 016606 103600                           .word 103600                  ; line 13
    3555 016610 104040                           .word 104040                  ; line 14
    3556 016612 104300                           .word 104300                  ; line 15
    3557 016614 104540                           .word 104540                  ; line 16
    3558 016616 105000                           .word 105000                  ; line 17
    3559 016620 105240                           .word 105240                  ; line 18
    3560 016622 105500                           .word 105500                  ; line 19
    3561 016624 105740                           .word 105740                  ; line 20
    3562 016626 106200                           .word 106200                  ; line 21
    3563 016630 106440                           .word 106440                  ; line 22
    3564 016632 106700                           .word 106700                  ; line 23
    3565 016634 107140                           .word 107140                  ; line 24
    3566 016636 107400                           .word 107400                  ; line 25
    3567                                ;
    3568                                ; ps2 scancode translate table - normal case
    3569                                ;
    3570                                ps2tb1:
    3571 016640    000                           .byte 0                       ; 00 - unused
    3572 016641    000                           .byte 0                       ; 01 - f9
    3573 016642    000                           .byte 0                       ; 02 -
    3574 016643    000                           .byte 0                       ; 03 - f5
    3575 016644    377                           .byte kcf3                    ; 04 - f3
    3576 016645    375                           .byte kcf1                    ; 05 - f1
    3577 016646    376                           .byte kcf2                    ; 06 - f2
    3578 016647    000                           .byte 0                       ; 07 - f12
    3579 016650    000                           .byte 0                       ; 08 -
    3580 016651    000                           .byte 0                       ; 09 - f10
    3581 016652    000                           .byte 0                       ; 0a - f8
    3582 016653    000                           .byte 0                       ; 0b - f6
    3583 016654    340                           .byte kcf4                    ; 0c - f4
    3584 016655    011                           .ascii <11>                   ; 0d - tab
    3585 016656    140                           .ascii /`/                    ; 0e - backtick/tilde
    3586 016657    000                           .byte 0                       ; 0f -
    3587 016660    000                           .byte 0                       ; 10 -
    3588 016661    000                           .byte 0                       ; 11 -
    3589 016662    000                           .byte 0                       ; 12 -
    3590 016663    000                           .byte 0                       ; 13 -
    3591 016664    000                           .byte 0                       ; 14 -
    3592 016665    161                           .ascii /q/                    ; 15 - q
    3593 016666    061                           .ascii /1/                    ; 16 - 1
    3594 016667    000                           .byte 0                       ; 17 -
    3595 016670    000                           .byte 0                       ; 18 -
    3596 016671    000                           .byte 0                       ; 19 -
    3597 016672    172                           .ascii /z/                    ; 1a - z
    3598 016673    163                           .ascii /s/                    ; 1b - s
    3599 016674    141                           .ascii /a/                    ; 1c - a
    3600 016675    167                           .ascii /w/                    ; 1d - w
    3601 016676    062                           .ascii /2/                    ; 1e - 2
    3602 016677    000                           .byte 0                       ; 1f -
    3603 016700    000                           .byte 0                       ; 20 -
    3604 016701    143                           .ascii /c/                    ; 21 - c
    3605 016702    170                           .ascii /x/                    ; 22 - x
    3606 016703    144                           .ascii /d/                    ; 23 - d
    3607 016704    145                           .ascii /e/                    ; 24 - e
    3608 016705    064                           .ascii /4/                    ; 25 - 4
    3609 016706    063                           .ascii /3/                    ; 26 - 3
    3610 016707    000                           .byte 0                       ; 27 -
    3611 016710    000                           .byte 0                       ; 28 -
    3612 016711    040                           .ascii / /                    ; 29 - space
    3613 016712    166                           .ascii /v/                    ; 2a - v
    3614 016713    146                           .ascii /f/                    ; 2b - f
    3615 016714    164                           .ascii /t/                    ; 2c - t
    3616 016715    162                           .ascii /r/                    ; 2d - r
    3617 016716    065                           .ascii /5/                    ; 2e - 5
    3618 016717    000                           .byte 0                       ; 2f -
    3619 016720    000                           .byte 0                       ; 30 -
    3620 016721    156                           .ascii /n/                    ; 31 - n
    3621 016722    142                           .ascii /b/                    ; 32 - b
    3622 016723    150                           .ascii /h/                    ; 33 - h
    3623 016724    147                           .ascii /g/                    ; 34 - g
    3624 016725    171                           .ascii /y/                    ; 35 - y
    3625 016726    066                           .ascii /6/                    ; 36 - 6
    3626 016727    000                           .byte 0                       ; 37 -
    3627 016730    000                           .byte 0                       ; 38 -
    3628 016731    000                           .byte 0                       ; 39 -
    3629 016732    155                           .ascii /m/                    ; 3a - m
    3630 016733    152                           .ascii /j/                    ; 3b - j
    3631 016734    165                           .ascii /u/                    ; 3c - u
    3632 016735    067                           .ascii /7/                    ; 3d - 7
    3633 016736    070                           .ascii /8/                    ; 3e - 8
    3634 016737    000                           .byte 0                       ; 3f -
    3635 016740    000                           .byte 0                       ; 40 -
    3636 016741    054                           .ascii /,/                    ; 41 - comma, lt
    3637 016742    153                           .ascii /k/                    ; 42 - k
    3638 016743    151                           .ascii /i/                    ; 43 - i
    3639 016744    157                           .ascii /o/                    ; 44 - o
    3640 016745    060                           .ascii /0/                    ; 45 - 0
    3641 016746    071                           .ascii /9/                    ; 46 - 9
    3642 016747    000                           .byte 0                       ; 47 -
    3643 016750    000                           .byte 0                       ; 48 -
    3644 016751    056                           .ascii /./                    ; 49 - period, gt
    3645 016752    057                           .byte 57                      ; 4a - slash, question mark
    3646 016753    154                           .ascii /l/                    ; 4b - l
    3647 016754    073                           .ascii /;/                    ; 4c - semicolon, colon
    3648 016755    160                           .ascii /p/                    ; 4d - p
    3649 016756    055                           .ascii /-/                    ; 4e - minus, underscore
    3650 016757    000                           .byte 0                       ; 4f -
    3651 016760    000                           .byte 0                       ; 50 -
    3652 016761    000                           .byte 0                       ; 51 -
    3653 016762    047                           .ascii /'/                    ; 52 - quote, double quote
    3654 016763    000                           .byte 0                       ; 53 -
    3655 016764    133                           .ascii /[/                    ; 54 - left square bracket, left curly bracket
    3656 016765    075                           .ascii /=/                    ; 55 - equals, plus
    3657 016766    000                           .byte 0                       ; 56 -
    3658 016767    000                           .byte 0                       ; 57 -
    3659 016770    000                           .byte 0                       ; 58 - caps lock
    3660 016771    000                           .byte 0                       ; 59 - right shift
    3661 016772    347                           .byte kcentr                  ; 5a - enter
    3662 016773    135                           .ascii /]/                    ; 5b - right square bracket, right curly bracket
    3663 016774    000                           .byte 0                       ; 5c -
    3664 016775    134                           .ascii /\/                    ; 5d - backslash, vertical bar
    3665 016776    000                           .byte 0                       ; 5e -
    3666 016777    000                           .byte 0                       ; 5f -
    3667 017000    000                           .byte 0                       ; 60 -
    3668 017001    000                           .byte 0                       ; 61 -
    3669 017002    000                           .byte 0                       ; 62 -
    3670 017003    000                           .byte 0                       ; 63 -
    3671 017004    000                           .byte 0                       ; 64 -
    3672 017005    000                           .byte 0                       ; 65 -
    3673 017006    177                           .ascii <177>                  ; 66 - backspace - sends del
    3674 017007    000                           .byte 0                       ; 67 -
    3675 017010    000                           .byte 0                       ; 68 -
    3676 017011    360                           .byte kcn1                    ; 69 - num pad 1
    3677 017012    000                           .byte 0                       ; 6a -
    3678 017013    363                           .byte kcn4                    ; 6b - num pad 4
    3679 017014    366                           .byte kcn7                    ; 6c - num pad 7
    3680 017015    000                           .byte 0                       ; 6d -
    3681 017016    000                           .byte 0                       ; 6e -
    3682 017017    000                           .byte 0                       ; 6f -
    3683 017020    357                           .byte kcn0                    ; 70 - num pad 0
    3684 017021    356                           .byte kcndot                  ; 71 - num pad dot
    3685 017022    361                           .byte kcn2                    ; 72 - num pad 2
    3686 017023    364                           .byte kcn5                    ; 73 - num pad 5
    3687 017024    365                           .byte kcn6                    ; 74 - num pad 6
    3688 017025    367                           .byte kcn8                    ; 75 - num pad 8
    3689 017026    033                           .ascii <33>                   ; 76 - escape
    3690 017027    351                           .byte kcnlck                  ; 77 - num lock
    3691 017030    000                           .byte 0                       ; 78 - f11
    3692 017031    355                           .byte kcnpls                  ; 79 - num pad plus
    3693 017032    362                           .byte kcn3                    ; 7a - num pad 3
    3694 017033    354                           .byte kcnmin                  ; 7b - num pad minus
    3695 017034    353                           .byte kcnast                  ; 7c - num pad asterisk
    3696 017035    370                           .byte kcn9                    ; 7d - num pad 9
    3697 017036    000                           .byte 0                       ; 7e -
    3698 017037    000                           .byte 0                       ; 7f -
    3699                                ;
    3700                                ; ps2 scancode translate table - shifted case
    3701                                ;
    3702                                ps2tb2:
    3703 017040    000                           .byte 0                       ; 00 - unused
    3704 017041    000                           .byte 0                       ; 01 - f9
    3705 017042    000                           .byte 0                       ; 02 -
    3706 017043    000                           .byte 0                       ; 03 - f5
    3707 017044    000                           .byte 0                       ; 04 - f3
    3708 017045    000                           .byte 0                       ; 05 - f1
    3709 017046    000                           .byte 0                       ; 06 - f2
    3710 017047    000                           .byte 0                       ; 07 - f12
    3711 017050    000                           .byte 0                       ; 08 -
    3712 017051    000                           .byte 0                       ; 09 - f10
    3713 017052    000                           .byte 0                       ; 0a - f8
    3714 017053    000                           .byte 0                       ; 0b - f6
    3715 017054    000                           .byte 0                       ; 0c - f4
    3716 017055    011                           .ascii <11>                   ; 0d - tab
    3717 017056    176                           .ascii /~/                    ; 0e - backtick/tilde
    3718 017057    000                           .byte 0                       ; 0f -
    3719 017060    000                           .byte 0                       ; 10 -
    3720 017061    000                           .byte 0                       ; 11 -
    3721 017062    000                           .byte 0                       ; 12 -
    3722 017063    000                           .byte 0                       ; 13 -
    3723 017064    000                           .byte 0                       ; 14 -
    3724 017065    121                           .ascii /Q/                    ; 15 - q
    3725 017066    041                           .ascii /!/                    ; 16 - 1
    3726 017067    000                           .byte 0                       ; 17 -
    3727 017070    000                           .byte 0                       ; 18 -
    3728 017071    000                           .byte 0                       ; 19 -
    3729 017072    132                           .ascii /Z/                    ; 1a - z
    3730 017073    123                           .ascii /S/                    ; 1b - s
    3731 017074    101                           .ascii /A/                    ; 1c - a
    3732 017075    127                           .ascii /W/                    ; 1d - w
    3733 017076    100                           .ascii /@/                    ; 1e - 2
    3734 017077    000                           .byte 0                       ; 1f -
    3735 017100    000                           .byte 0                       ; 20 -
    3736 017101    103                           .ascii /C/                    ; 21 - c
    3737 017102    130                           .ascii /X/                    ; 22 - x
    3738 017103    104                           .ascii /D/                    ; 23 - d
    3739 017104    105                           .ascii /E/                    ; 24 - e
    3740 017105    044                           .ascii /$/                    ; 25 - 4
    3741 017106    043                           .ascii /#/                    ; 26 - 3
    3742 017107    000                           .byte 0                       ; 27 -
    3743 017110    000                           .byte 0                       ; 28 -
    3744 017111    040                           .ascii / /                    ; 29 - space
    3745 017112    126                           .ascii /V/                    ; 2a - v
    3746 017113    106                           .ascii /F/                    ; 2b - f
    3747 017114    124                           .ascii /T/                    ; 2c - t
    3748 017115    122                           .ascii /R/                    ; 2d - r
    3749 017116    045                           .ascii /%/                    ; 2e - 5
    3750 017117    000                           .byte 0                       ; 2f -
    3751 017120    000                           .byte 0                       ; 30 -
    3752 017121    116                           .ascii /N/                    ; 31 - n
    3753 017122    102                           .ascii /B/                    ; 32 - b
    3754 017123    110                           .ascii /H/                    ; 33 - h
    3755 017124    107                           .ascii /G/                    ; 34 - g
    3756 017125    131                           .ascii /Y/                    ; 35 - y
    3757 017126    136                           .ascii /^/                    ; 36 - 6
    3758 017127    000                           .byte 0                       ; 37 -
    3759 017130    000                           .byte 0                       ; 38 -
    3760 017131    000                           .byte 0                       ; 39 -
    3761 017132    115                           .ascii /M/                    ; 3a - m
    3762 017133    112                           .ascii /J/                    ; 3b - j
    3763 017134    125                           .ascii /U/                    ; 3c - u
    3764 017135    046                           .ascii /&/                    ; 3d - 7
    3765 017136    052                           .byte 52                      ; 3e - 8     asterisk - can't use the ascii code here, it messes up the editor
    3766 017137    000                           .byte 0                       ; 3f -
    3767 017140    000                           .byte 0                       ; 40 -
    3768 017141    074                           .ascii /</                    ; 41 - comma, lt
    3769 017142    113                           .ascii /K/                    ; 42 - k
    3770 017143    111                           .ascii /I/                    ; 43 - i
    3771 017144    117                           .ascii /O/                    ; 44 - o
    3772 017145    051                           .ascii /)/                    ; 45 - 0
    3773 017146    050                           .ascii /(/                    ; 46 - 9
    3774 017147    000                           .byte 0                       ; 47 -
    3775 017150    000                           .byte 0                       ; 48 -
    3776 017151    076                           .ascii />/                    ; 49 - period, gt
    3777 017152    077                           .ascii /?/                    ; 4a - slash, question mark
    3778 017153    114                           .ascii /L/                    ; 4b - l
    3779 017154    072                           .ascii /:/                    ; 4c - semicolon, colon
    3780 017155    120                           .ascii /P/                    ; 4d - p
    3781 017156    137                           .ascii /_/                    ; 4e - minus, underscore
    3782 017157    000                           .byte 0                       ; 4f -
    3783 017160    000                           .byte 0                       ; 50 -
    3784 017161    000                           .byte 0                       ; 51 -
    3785 017162    042                           .byte 42                      ; 52 - quote, double quote - can't use the ascii code here, it messes up the editor
    3786 017163    000                           .byte 0                       ; 53 -
    3787 017164    173                           .ascii /{/                    ; 54 - left square bracket, left curly bracket
    3788 017165    053                           .ascii /+/                    ; 55 - equals, plus
    3789 017166    000                           .byte 0                       ; 56 -
    3790 017167    000                           .byte 0                       ; 57 -
    3791 017170    000                           .byte 0                       ; 58 - caps lock
    3792 017171    000                           .byte 0                       ; 59 -
    3793 017172    015                           .ascii <15>                   ; 5a - enter
    3794 017173    175                           .ascii /}/                    ; 5b - right square bracket, right curly bracket
    3795 017174    000                           .byte 0                       ; 5c -
    3796 017175    174                           .ascii /|/                    ; 5d - backslash, vertical bar
    3797 017176    000                           .byte 0                       ; 5e -
    3798 017177    000                           .byte 0                       ; 5f -
    3799 017200    000                           .byte 0                       ; 60 -
    3800 017201    000                           .byte 0                       ; 61 -
    3801 017202    000                           .byte 0                       ; 62 -
    3802 017203    000                           .byte 0                       ; 63 -
    3803 017204    000                           .byte 0                       ; 64 -
    3804 017205    000                           .byte 0                       ; 65 -
    3805 017206    010                           .ascii <10>                   ; 66 - backspace
    3806 017207    000                           .byte 0                       ; 67 -
    3807 017210    000                           .byte 0                       ; 68 -
    3808 017211    000                           .byte 0                       ; 69 -
    3809 017212    000                           .byte 0                       ; 6a -
    3810 017213    000                           .byte 0                       ; 6b -
    3811 017214    000                           .byte 0                       ; 6c -
    3812 017215    000                           .byte 0                       ; 6d -
    3813 017216    000                           .byte 0                       ; 6e -
    3814 017217    000                           .byte 0                       ; 6f -
    3815 017220    000                           .byte 0                       ; 70 -
    3816 017221    000                           .byte 0                       ; 71 -
    3817 017222    000                           .byte 0                       ; 72 -
    3818 017223    000                           .byte 0                       ; 73 -
    3819 017224    000                           .byte 0                       ; 74 -
    3820 017225    000                           .byte 0                       ; 75 -
    3821 017226    033                           .ascii <33>                   ; 76 - escape
    3822 017227    000                           .byte 0                       ; 77 -
    3823 017230    000                           .byte 0                       ; 78 - f11
    3824 017231    000                           .byte 0                       ; 79 -
    3825 017232    000                           .byte 0                       ; 7a -
    3826 017233    000                           .byte 0                       ; 7b -
    3827 017234    000                           .byte 0                       ; 7c -
    3828 017235    000                           .byte 0                       ; 7d -
    3829 017236    000                           .byte 0                       ; 7e -
    3830 017237    000                           .byte 0                       ; 7f -
    3831                                ;
    3832                                ; ps2 scancode translate table - extended case
    3833                                ;
    3834                                ps2tb3:
    3835 017240    000                           .byte 0                       ; 00 -
    3836 017241    000                           .byte 0                       ; 01 -
    3837 017242    000                           .byte 0                       ; 02 -
    3838 017243    000                           .byte 0                       ; 03 -
    3839 017244    000                           .byte 0                       ; 04 -
    3840 017245    000                           .byte 0                       ; 05 -
    3841 017246    000                           .byte 0                       ; 06 -
    3842 017247    000                           .byte 0                       ; 07 -
    3843 017250    000                           .byte 0                       ; 08 -
    3844 017251    000                           .byte 0                       ; 09 -
    3845 017252    000                           .byte 0                       ; 0a -
    3846 017253    000                           .byte 0                       ; 0b -
    3847 017254    000                           .byte 0                       ; 0c -
    3848 017255    000                           .byte 0                       ; 0d -
    3849 017256    000                           .byte 0                       ; 0e -
    3850 017257    000                           .byte 0                       ; 0f -
    3851 017260    000                           .byte 0                       ; 10 -
    3852 017261    000                           .byte 0                       ; 11 -
    3853 017262    000                           .byte 0                       ; 12 -
    3854 017263    000                           .byte 0                       ; 13 -
    3855 017264    000                           .byte 0                       ; 14 -
    3856 017265    000                           .byte 0                       ; 15 -
    3857 017266    000                           .byte 0                       ; 16 -
    3858 017267    000                           .byte 0                       ; 17 -
    3859 017270    000                           .byte 0                       ; 18 -
    3860 017271    000                           .byte 0                       ; 19 -
    3861 017272    000                           .byte 0                       ; 1a -
    3862 017273    000                           .byte 0                       ; 1b -
    3863 017274    000                           .byte 0                       ; 1c -
    3864 017275    000                           .byte 0                       ; 1d -
    3865 017276    000                           .byte 0                       ; 1e -
    3866 017277    000                           .byte 0                       ; 1f -
    3867 017300    000                           .byte 0                       ; 20 -
    3868 017301    000                           .byte 0                       ; 21 -
    3869 017302    000                           .byte 0                       ; 22 -
    3870 017303    000                           .byte 0                       ; 23 -
    3871 017304    000                           .byte 0                       ; 24 -
    3872 017305    000                           .byte 0                       ; 25 -
    3873 017306    000                           .byte 0                       ; 26 -
    3874 017307    000                           .byte 0                       ; 27 -
    3875 017310    000                           .byte 0                       ; 28 -
    3876 017311    000                           .byte 0                       ; 29 -
    3877 017312    000                           .byte 0                       ; 2a -
    3878 017313    000                           .byte 0                       ; 2b -
    3879 017314    000                           .byte 0                       ; 2c -
    3880 017315    000                           .byte 0                       ; 2d -
    3881 017316    000                           .byte 0                       ; 2e -
    3882 017317    000                           .byte 0                       ; 2f -
    3883 017320    000                           .byte 0                       ; 30 -
    3884 017321    000                           .byte 0                       ; 31 -
    3885 017322    000                           .byte 0                       ; 32 -
    3886 017323    000                           .byte 0                       ; 33 -
    3887 017324    000                           .byte 0                       ; 34 -
    3888 017325    000                           .byte 0                       ; 35 -
    3889 017326    000                           .byte 0                       ; 36 -
    3890 017327    000                           .byte 0                       ; 37 -
    3891 017330    000                           .byte 0                       ; 38 -
    3892 017331    000                           .byte 0                       ; 39 -
    3893 017332    000                           .byte 0                       ; 3a -
    3894 017333    000                           .byte 0                       ; 3b -
    3895 017334    000                           .byte 0                       ; 3c -
    3896 017335    000                           .byte 0                       ; 3d -
    3897 017336    000                           .byte 0                       ; 3e -
    3898 017337    000                           .byte 0                       ; 3f -
    3899 017340    000                           .byte 0                       ; 40 -
    3900 017341    000                           .byte 0                       ; 41 -
    3901 017342    000                           .byte 0                       ; 42 -
    3902 017343    000                           .byte 0                       ; 43 -
    3903 017344    000                           .byte 0                       ; 44 -
    3904 017345    000                           .byte 0                       ; 45 -
    3905 017346    000                           .byte 0                       ; 46 -
    3906 017347    000                           .byte 0                       ; 47 -
    3907 017350    000                           .byte 0                       ; 48 -
    3908 017351    000                           .byte 0                       ; 49 -
    3909 017352    350                           .byte kcndiv                  ; 4a - keypad slash
    3910 017353    000                           .byte 0                       ; 4b -
    3911 017354    000                           .byte 0                       ; 4c -
    3912 017355    000                           .byte 0                       ; 4d -
    3913 017356    000                           .byte 0                       ; 4e -
    3914 017357    000                           .byte 0                       ; 4f -
    3915 017360    000                           .byte 0                       ; 50 -
    3916 017361    000                           .byte 0                       ; 51 -
    3917 017362    000                           .byte 0                       ; 52 -
    3918 017363    000                           .byte 0                       ; 53 -
    3919 017364    000                           .byte 0                       ; 54 -
    3920 017365    000                           .byte 0                       ; 55 -
    3921 017366    000                           .byte 0                       ; 56 -
    3922 017367    000                           .byte 0                       ; 57 -
    3923 017370    000                           .byte 0                       ; 58 -
    3924 017371    000                           .byte 0                       ; 59 -
    3925 017372    352                           .byte kcnent                  ; 5a - keypad enter
    3926 017373    000                           .byte 0                       ; 5b -
    3927 017374    000                           .byte 0                       ; 5c -
    3928 017375    000                           .byte 0                       ; 5d -
    3929 017376    000                           .byte 0                       ; 5e -
    3930 017377    000                           .byte 0                       ; 5f -
    3931 017400    000                           .byte 0                       ; 60 -
    3932 017401    000                           .byte 0                       ; 61 -
    3933 017402    000                           .byte 0                       ; 62 -
    3934 017403    000                           .byte 0                       ; 63 -
    3935 017404    000                           .byte 0                       ; 64 -
    3936 017405    000                           .byte 0                       ; 65 -
    3937 017406    000                           .byte 0                       ; 66 -
    3938 017407    000                           .byte 0                       ; 67 -
    3939 017410    000                           .byte 0                       ; 68 -
    3940 017411    374                           .byte kcend                   ; 69 - end
    3941 017412    000                           .byte 0                       ; 6a -
    3942 017413    341                           .byte kclar                   ; 6b - left arrow
    3943 017414    372                           .byte kchome                  ; 6c - home
    3944 017415    000                           .byte 0                       ; 6d -
    3945 017416    000                           .byte 0                       ; 6e -
    3946 017417    000                           .byte 0                       ; 6f -
    3947 017420    371                           .byte kcins                   ; 70 - insert
    3948 017421    373                           .byte kcdel                   ; 71 - delete
    3949 017422    342                           .byte kcdar                   ; 72 - down arrow
    3950 017423    000                           .byte 0                       ; 73 -
    3951 017424    343                           .byte kcrar                   ; 74 - right arrow
    3952 017425    344                           .byte kcuar                   ; 75 - up arrow
    3953 017426    000                           .byte 0                       ; 76 -
    3954 017427    000                           .byte 0                       ; 77 -
    3955 017430    000                           .byte 0                       ; 78 - f11
    3956 017431    000                           .byte 0                       ; 79 -
    3957 017432    345                           .byte kcpgdn                  ; 7a - pg dn
    3958 017433    000                           .byte 0                       ; 7b -
    3959 017434    000                           .byte 0                       ; 7c -
    3960 017435    346                           .byte kcpgup                  ; 7d - pg up
    3961 017436    000                           .byte 0                       ; 7e -
    3962 017437    000                           .byte 0                       ; 7f -
    3962                                
